import { ChainObject, ClassConstructor, RangedChainObject } from "@gala-chain/api";
import { ChainUser } from "@gala-chain/client";
import { Context, Contract } from "fabric-contract-api";
import { ChaincodeStub } from "fabric-shim";
import Logger from "fabric-shim/lib/logger";
import { CachedKV, FabricIterable } from "./FabricIterable";
interface GalaLoggerInstance {
    getLogger(name?: string): Logger;
    error(message: string): void;
    warn(message: string): void;
    info(message: string): void;
    debug(message: string): void;
    log(level: "debug" | "info" | "warn" | "error", msg: string | (Record<string, unknown> & {
        message: string;
    })): void;
    logTimeline(timelineActionDescription: string, context: string, metaData?: unknown[], error?: Error): void;
}
type GalaChainStub = ChaincodeStub & {
    getCachedState(key: string): Promise<Uint8Array>;
    getCachedStateByPartialCompositeKey(objectType: string, attributes: string[]): FabricIterable<CachedKV>;
    flushWrites(): Promise<void>;
};
type TestGalaChainContext = Context & {
    readonly stub: GalaChainStub;
    readonly logger: GalaLoggerInstance;
    set callingUserData(d: {
        alias: string;
        ethAddress: string | undefined;
    });
    get callingUser(): string;
    get callingUserEthAddress(): string;
    get txUnixTime(): number;
    setChaincodeStub(stub: ChaincodeStub): void;
};
type GalaContract<Ctx extends TestGalaChainContext> = Contract & {
    beforeTransaction(ctx: Ctx): Promise<void>;
    createContext(): Ctx;
};
declare class Fixture<Ctx extends TestGalaChainContext, T extends GalaContract<Ctx>> {
    readonly writes: Record<string, string>;
    readonly state: Record<string, string>;
    private readonly stub;
    readonly contract: T;
    readonly ctx: Ctx;
    callingChainUser: ChainUser;
    private knownUsers;
    constructor(contractClass: ClassConstructor<T>, writes?: Record<string, string>, state?: Record<string, string>);
    callingUser(user: ChainUser, mspId?: string): Fixture<Ctx, T>;
    callingUser(user: string, mspId?: string): Fixture<Ctx, T>;
    savedState(...objs: ChainObject[]): Fixture<Ctx, T>;
    savedKVState(...objs: {
        key: string;
        value: string;
    }[]): Fixture<Ctx, T>;
    savedRangeState(objs: RangedChainObject[]): Fixture<Ctx, T>;
}
export declare function fixture<Ctx extends TestGalaChainContext, T extends GalaContract<Ctx>>(contractClass: ClassConstructor<T>): Fixture<Ctx, T>;
export {};
