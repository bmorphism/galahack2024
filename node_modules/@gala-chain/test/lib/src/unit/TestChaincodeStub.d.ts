import { ClientIdentity, ChaincodeStub as FChaincodeStub, Iterators, StateQueryResponse } from "fabric-shim";
import { FabricIterable } from "./FabricIterable";
export interface ChaincodeStubClassType extends FChaincodeStub {
    new (client: any, channel_id: any, txId: any, chaincodeInput: any, signedProposal: any): ChaincodeStubClassType;
    creator: unknown;
    createCompositeKey(objectType: string, attributes: string[]): string;
}
declare const ChaincodeStub: ChaincodeStubClassType;
export declare class TestChaincodeStub extends ChaincodeStub {
    private static epoch;
    readonly state: Record<string, string>;
    readonly writes: Record<string, string>;
    constructor(args: string[], state: Record<string, string> | undefined, writes: Record<string, string> | undefined);
    getClientIdentity(caUser: string, mspId: string): ClientIdentity;
    mockState(key: string, value: string): void;
    putState: (key: string, value: Uint8Array) => Promise<void>;
    deleteState: (key: string) => Promise<void>;
    getState: (key: string) => Promise<Uint8Array>;
    getStateByPartialCompositeKey: (objectType: string, attributes: string[]) => FabricIterable<Iterators.KV>;
    getStateByPartialCompositeKeyWithPagination(indexKey: string, keyParts: string[]): Promise<StateQueryResponse<Iterators.StateQueryIterator>> & AsyncIterable<Iterators.KV>;
    getStateByRange(start: string, end: string): Promise<Iterators.StateQueryIterator> & AsyncIterable<Iterators.KV>;
}
export {};
