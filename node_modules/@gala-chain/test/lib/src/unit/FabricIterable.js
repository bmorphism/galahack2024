"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fabricIterable = exports.prepend = exports.filter = exports.asyncIterator = void 0;
const asyncIterator = (arr) => {
    let nextIndex = 0;
    return {
        next: async () => {
            if (nextIndex < arr.length) {
                const result = {
                    value: arr[nextIndex],
                    done: false
                };
                nextIndex += 1;
                return result;
            }
            return {
                value: arr[arr.length - 1],
                done: true
            };
        }
    };
};
exports.asyncIterator = asyncIterator;
const filter = (include, iterator) => {
    const filteredIterator = {
        next: async () => {
            const result = await iterator.next();
            if (result.done || include(result.value)) {
                return result;
            }
            return filteredIterator.next();
        }
    };
    return filteredIterator;
};
exports.filter = filter;
const prepend = (arr, iterator) => {
    const arrIterator = (0, exports.asyncIterator)(arr);
    let isArrIteratorDone = false;
    return {
        next: async () => {
            if (!isArrIteratorDone) {
                const arrIteratorResult = await arrIterator.next();
                if (arrIteratorResult.done) {
                    isArrIteratorDone = true;
                    return iterator.next();
                }
                else {
                    return arrIteratorResult;
                }
            }
            else {
                return iterator.next();
            }
        }
    };
};
exports.prepend = prepend;
const fabricIterable = (iterator) => {
    const stateQueryIterator = {
        close: () => Promise.resolve(), // do nothing,
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore the only incompatibility is whether 'done' can be undefined
        next: () => iterator.next()
    };
    const response = {
        ...Promise.resolve(stateQueryIterator),
        [Symbol.asyncIterator]: () => iterator
    };
    return response;
};
exports.fabricIterable = fabricIterable;
//# sourceMappingURL=FabricIterable.js.map