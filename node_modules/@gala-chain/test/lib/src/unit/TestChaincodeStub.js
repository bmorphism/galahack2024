"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestChaincodeStub = void 0;
const tslib_1 = require("tslib");
const long_1 = tslib_1.__importDefault(require("long"));
const nanoid_1 = require("nanoid");
const FabricIterable_1 = require("./FabricIterable");
// eslint-disable-next-line global-require
/* eslint-disable  @typescript-eslint/no-var-requires */
const ChaincodeStub = require("fabric-shim/lib/stub");
const sampleIdBytes = Buffer.from(`-----BEGIN CERTIFICATE-----
MIICTzCCAfagAwIBAgIQKX7n2CQ9hyHjB/xBlumWmTAKBggqhkjOPQQDAjBmMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
YW5jaXNjbzERMA8GA1UEChMIcm9vdC5jb20xFzAVBgNVBAMTDnRsc2NhLnJvb3Qu
Y29tMB4XDTIxMTEwNTE0MTgwMFoXDTMxMTEwMzE0MTgwMFowVjELMAkGA1UEBhMC
VVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28x
GjAYBgNVBAMTEW9yZGVyZXIwLnJvb3QuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0D
AQcDQgAE8Kj9Ggxj2jPY+bPFJ4fS0yfDMf1RLqwzR+oL38MZ2Bb1PtjUhd6uayvl
qURcnkKPwwRlD8Rucu8NbooBXN1NK6OBlTCBkjAOBgNVHQ8BAf8EBAMCBaAwHQYD
VR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwKwYDVR0j
BCQwIoAgoOMq1siwgaiOmsuy+wG4hfxB0V5mD9FeuJGDYWNFCuowJgYDVR0RBB8w
HYIRb3JkZXJlcjAucm9vdC5jb22CCG9yZGVyZXIwMAoGCCqGSM49BAMCA0cAMEQC
IGYQH8J4+PICOoEcHZAuaQYh53DHSONgC1/A45aWNoE/AiAfnoxXiiD2f1MdiKx4
neOrBgBGMDzq2aBbdX5EeQZbAw==
-----END CERTIFICATE-----`);
function x509Identity(caUser, mspId) {
    const userInCert = caUser.replace("client|", "");
    const id = `x509::/OU=client/CN=${userInCert}::/C=US/ST=California/L=San Francisco/O=curator.local/CN=ca.curator.local`;
    return {
        assertAttributeValue(attrValue) {
            throw new Error("Method 'assertAttributeValue' not implemented.");
        },
        getAttributeValue(attrName) {
            throw new Error("Method 'getAttributeValue' not implemented.");
        },
        getMSPID: () => mspId,
        getID: () => id,
        getIDBytes: () => sampleIdBytes
    };
}
const creatorMock = () => ({
    mspid: "CuratorOrg",
    id: "x509::/OU=client/CN=admin::/C=US/ST=California/L=San Francisco/O=curator.local/CN=ca.curator.local",
    idBytes: sampleIdBytes
});
class TestChaincodeStub extends ChaincodeStub {
    constructor(args, state, writes) {
        super({}, "asset-channel", (0, nanoid_1.nanoid)(), { args: args }, undefined);
        this.putState = (key, value) => {
            const valueString = value.toString();
            this.state[key] = valueString;
            this.writes[key] = valueString;
            return Promise.resolve();
        };
        this.deleteState = (key) => {
            delete this.state[key];
            this.writes[key] = "";
            return Promise.resolve();
        };
        this.getState = (key) => {
            var _a;
            const response = (_a = this.state[key]) !== null && _a !== void 0 ? _a : "";
            return Promise.resolve(Buffer.from(response));
        };
        this.getStateByPartialCompositeKey = (objectType, attributes) => {
            const partialCompositeKey = this.createCompositeKey(objectType, attributes);
            const kvs = Object.entries(this.state)
                .filter(([k]) => k.startsWith(partialCompositeKey))
                .map(([k, v]) => ({ namespace: "test-chaincode-name", key: k, value: Buffer.from(v) }));
            return (0, FabricIterable_1.fabricIterable)((0, FabricIterable_1.asyncIterator)(kvs));
        };
        this.creator = creatorMock();
        this.state = state !== null && state !== void 0 ? state : {};
        this.writes = writes !== null && writes !== void 0 ? writes : {};
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        this.txTimestamp = {
            seconds: long_1.default.fromNumber(Date.now() / 1000),
            nanos: 0
        };
        TestChaincodeStub.epoch += 1;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        this.signedProposal = {
            proposal: {
                header: {
                    channelHeader: {
                        epoch: 0
                    }
                }
            }
        };
    }
    getClientIdentity(caUser, mspId) {
        return x509Identity(caUser, mspId);
    }
    mockState(key, value) {
        this.state[key] = value;
    }
    getStateByPartialCompositeKeyWithPagination(indexKey, keyParts) {
        const partialKey = "\u0000" + [indexKey, ...keyParts].join("\u0000");
        const keys = Object.keys(this.state)
            .filter((k) => k.startsWith(partialKey))
            .sort();
        const kvs = keys.map((key) => ({
            key,
            value: Buffer.from(this.state[key]),
            namespace: "???"
        }));
        const iterator = (0, FabricIterable_1.fabricIterable)((0, FabricIterable_1.asyncIterator)(kvs));
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        iterator.metadata = {
            bookmark: "",
            fetchedRecordsCount: kvs.length
        };
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        return iterator;
    }
    getStateByRange(start, end) {
        const keys = Object.keys(this.state).sort();
        const kvs = keys.map((key) => ({
            key,
            value: Buffer.from(this.state[key]),
            namespace: "???"
        }));
        const iterator = (0, FabricIterable_1.asyncIterator)(kvs);
        const filtered = (0, FabricIterable_1.filter)((obj) => obj.key >= start && obj.key < end, iterator);
        return (0, FabricIterable_1.fabricIterable)(filtered);
    }
}
exports.TestChaincodeStub = TestChaincodeStub;
TestChaincodeStub.epoch = 0;
//# sourceMappingURL=TestChaincodeStub.js.map