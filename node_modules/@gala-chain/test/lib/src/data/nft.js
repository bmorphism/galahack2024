"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const users_1 = tslib_1.__importDefault(require("./users"));
const utils_1 = require("./utils");
const tokenClassKeyPlain = (0, utils_1.createPlainFn)({
    collection: "TEST",
    category: "Item",
    type: "Potion",
    additionalKey: "Elixir"
});
const tokenClassPlain = (0, utils_1.createPlainFn)({
    ...tokenClassKeyPlain(),
    description: "Generated via automated test suite.",
    decimals: 0,
    image: "https://app.gala.games/test-image-placeholder-url.png",
    isNonFungible: true,
    maxCapacity: new bignumber_js_1.default(100000000),
    maxSupply: new bignumber_js_1.default(100000000),
    name: "TestElixirNft",
    network: api_1.GC_NETWORK_ID,
    symbol: "GALAXR",
    totalBurned: new bignumber_js_1.default(0),
    totalMintAllowance: new bignumber_js_1.default(0),
    totalSupply: new bignumber_js_1.default(0),
    authorities: [users_1.default.testAdminId]
});
const tokenAllowancePlain = (txUnixTime) => ({
    allowanceType: 1,
    additionalKey: "Elixir",
    quantity: new bignumber_js_1.default(100),
    quantitySpent: new bignumber_js_1.default(0),
    category: "Item",
    collection: "TEST",
    created: txUnixTime,
    expires: 0,
    instance: new bignumber_js_1.default(1),
    grantedBy: users_1.default.testUser2Id,
    grantedTo: users_1.default.testUser1Id,
    type: "Potion",
    uses: new bignumber_js_1.default(1),
    usesSpent: new bignumber_js_1.default(0)
});
const tokenMintAllowancePlain = (txUnixTime) => ({
    allowanceType: 4,
    additionalKey: "Elixir",
    quantity: new bignumber_js_1.default(2),
    quantitySpent: new bignumber_js_1.default(0),
    category: "Item",
    collection: "TEST",
    created: txUnixTime,
    expires: 0,
    instance: new bignumber_js_1.default(0),
    grantedBy: users_1.default.testAdminId,
    grantedTo: users_1.default.testAdminId,
    type: "Potion",
    uses: new bignumber_js_1.default(1),
    usesSpent: new bignumber_js_1.default(0)
});
const tokenInstance1KeyPlain = (0, utils_1.createPlainFn)({
    ...tokenClassKeyPlain(),
    instance: new bignumber_js_1.default(1)
});
const tokenInstance1Plain = (0, utils_1.createPlainFn)({
    ...tokenInstance1KeyPlain(),
    isNonFungible: true,
    owner: users_1.default.testUser1Id
});
const tokenBalancePlain = (0, utils_1.createPlainFn)({
    ...tokenClassKeyPlain(),
    owner: users_1.default.testUser1Id,
    instanceIds: [new bignumber_js_1.default(1)],
    lockedHolds: [],
    inUseHolds: [],
    quantity: new bignumber_js_1.default(1)
});
const tokenBurnPlain = (txUnixTime) => ({
    ...tokenInstance1KeyPlain(),
    burnedBy: users_1.default.testUser1Id,
    created: txUnixTime,
    quantity: new bignumber_js_1.default(1)
});
const tokenBurnCounterPlain = (txUnixTime, timeKey, epoch, totalKnownBurnsCount) => ({
    ...tokenBurnPlain(txUnixTime),
    timeKey,
    epoch,
    totalKnownBurnsCount
});
exports.default = {
    tokenClassKeyPlain,
    tokenClassKey: (0, utils_1.createInstanceFn)(api_1.TokenClassKey, tokenClassKeyPlain()),
    tokenClassPlain,
    tokenClass: (0, utils_1.createInstanceFn)(api_1.TokenClass, tokenClassPlain()),
    tokenAllowancePlain,
    tokenAllowance: (0, utils_1.createInstanceFn)(api_1.TokenAllowance, tokenAllowancePlain(1)),
    tokenMintAllowancePlain,
    tokenMintAllowance: (0, utils_1.createInstanceFn)(api_1.TokenAllowance, tokenMintAllowancePlain(1)),
    tokenInstance1KeyPlain,
    tokenInstance1Key: (0, utils_1.createInstanceFn)(api_1.TokenInstanceKey, tokenInstance1KeyPlain()),
    tokenInstance1Plain,
    tokenInstance1: (0, utils_1.createInstanceFn)(api_1.TokenInstance, tokenInstance1Plain()),
    tokenBalancePlain,
    tokenBalance: (0, utils_1.createInstanceFn)(api_1.TokenBalance, tokenBalancePlain()),
    tokenBurnPlain,
    tokenBurn: (0, utils_1.createInstanceFn)(api_1.TokenBurn, tokenBurnPlain(1)),
    tokenBurnCounterPlain
};
//# sourceMappingURL=nft.js.map