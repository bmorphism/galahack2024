import { ChainClient, ChainUser, ChainUserAPI, CommonContractAPI, ContractConfig, PublicKeyContractAPI } from "@gala-chain/client";
interface ContractAPIConfig<API = object> {
    name: string | ContractConfig;
    api: (c: ChainClient) => API;
}
interface ChainClientOptions {
    [key: string]: ContractAPIConfig | string;
}
type TestChainClient = ChainClient & ChainUserAPI;
type ChainClientResult<T extends ChainClientOptions> = {
    [K in keyof T]: T[K] extends ContractAPIConfig<infer API> ? TestChainClient & API : T[K] extends string ? TestChainClient & CommonContractAPI : never;
};
export type ChainClients<T extends ChainClientOptions = DefaultChainClientOptions> = ChainClientResult<T> & {
    disconnect: () => Promise<void>;
};
export interface ChainClientOptionsWithPK extends ChainClientOptions {
    pk: ContractAPIConfig<PublicKeyContractAPI>;
}
export interface DefaultChainClientOptions extends ChainClientOptions {
    assets: ContractAPIConfig<CommonContractAPI>;
    pk: ContractAPIConfig<PublicKeyContractAPI>;
}
declare function create(user?: ChainUser | string | undefined): Promise<ChainClients<DefaultChainClientOptions>>;
declare function create<T extends ChainClientOptions>(user?: ChainUser | string | undefined, opts?: T): Promise<ChainClients<T>>;
declare function create<T extends ChainClientOptions>(opts: T): Promise<ChainClients<T>>;
export type AdminChainClients<T extends ChainClientOptions = DefaultChainClientOptions> = ChainClients<T & ChainClientOptionsWithPK> & {
    createRegisteredUser(userAlias?: string): Promise<ChainUser>;
};
declare function createForAdmin<T extends ChainClientOptions>(opts?: T): Promise<AdminChainClients<T>>;
export declare const TestClients: {
    create: typeof create;
    createForAdmin: typeof createForAdmin;
};
export {};
