"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractTestClient = exports.networkRoot = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const client_1 = require("@gala-chain/client");
const globals_1 = require("@jest/globals");
const path_1 = tslib_1.__importDefault(require("path"));
const process_1 = tslib_1.__importDefault(require("process"));
// use this timeout in each test that uses ContractTestClient
globals_1.jest.setTimeout(60 * 1000);
function networkRoot() {
    if (process_1.default.env.GALA_NETWORK_ROOT_PATH === undefined) {
        throw new Error("Missing GALA_NETWORK_ROOT_PATH env variable");
    }
    return process_1.default.env.GALA_NETWORK_ROOT_PATH;
}
exports.networkRoot = networkRoot;
function defaultOpsApiConfigPath() {
    return path_1.default.resolve(networkRoot(), "api-config.json");
}
function defaultConnectionProfilePath(orgKey) {
    return path_1.default.resolve(networkRoot(), `connection-profiles/cpp-${orgKey}.json`);
}
const defaultParams = {
    CuratorOrg: {
        orgMsp: "CuratorOrg",
        adminId: (_a = process_1.default.env.CURATORORG_CA_ADMIN_NAME) !== null && _a !== void 0 ? _a : "admin",
        adminPass: (_b = process_1.default.env.CURATORORG_CA_ADMIN_PASSWORD) !== null && _b !== void 0 ? _b : "adminpw",
        connectionProfilePath: process_1.default.env.CURATORORG_CONNECTION_PROFILE_PATH,
        defaultConnectionProfilePath: () => defaultConnectionProfilePath("curator"),
        apiUrl: process_1.default.env.CURATORORG_OPS_API_URL, // note: no default value
        configPath: process_1.default.env.CURATORORG_OPS_API_CONFIG_PATH
    },
    UsersOrg1: {
        orgMsp: "UsersOrg1",
        adminId: (_c = process_1.default.env.USERSORG1_CA_ADMIN_NAME) !== null && _c !== void 0 ? _c : "admin",
        adminPass: (_d = process_1.default.env.USERSORG1_CA_ADMIN_PASSWORD) !== null && _d !== void 0 ? _d : "adminpw",
        connectionProfilePath: process_1.default.env.USERSORG1_CONNECTION_PROFILE_PATH,
        defaultConnectionProfilePath: () => defaultConnectionProfilePath("users"),
        apiUrl: process_1.default.env.USERSORG1_OPS_API_URL, // note: no default value
        configPath: process_1.default.env.USERSORG1_OPS_API_CONFIG_PATH
    },
    PartnerOrg1: {
        orgMsp: "PartnerOrg1",
        adminId: (_e = process_1.default.env.PARTNERORG1_CA_ADMIN_NAME) !== null && _e !== void 0 ? _e : "admin",
        adminPass: (_f = process_1.default.env.PARTNERORG1_CA_ADMIN_PASSWORD) !== null && _f !== void 0 ? _f : "adminpw",
        connectionProfilePath: process_1.default.env.PARTNERORG1_CONNECTION_PROFILE_PATH,
        defaultConnectionProfilePath: () => defaultConnectionProfilePath("partner"),
        apiUrl: process_1.default.env.PARTNERORG1_OPS_API_URL,
        configPath: process_1.default.env.PARTNERORG1_OPS_API_CONFIG_PATH
    }
};
function buildHFParams(params) {
    var _a, _b, _c;
    if (params.orgMsp === undefined) {
        throw new Error("Missing orgMsp in params");
    }
    const noDefaults = defaultParams[params.orgMsp] === undefined;
    const missingParams = params.adminId === undefined ||
        params.adminPass === undefined ||
        params.connectionProfilePath === undefined;
    if (noDefaults && missingParams) {
        const msg = `Missing adminId, adminPass or connectionProfilePath in params, ` +
            `and no default values are available for this orgMsp: ${params.orgMsp}`;
        throw new Error(msg);
    }
    return {
        orgMsp: params.orgMsp,
        userId: (_a = params.adminId) !== null && _a !== void 0 ? _a : defaultParams[params.orgMsp].adminId,
        userSecret: (_b = params.adminPass) !== null && _b !== void 0 ? _b : defaultParams[params.orgMsp].adminPass,
        connectionProfilePath: (_c = params.connectionProfilePath) !== null && _c !== void 0 ? _c : defaultParams[params.orgMsp].defaultConnectionProfilePath()
    };
}
function buildRestApiParams(params) {
    var _a, _b;
    return {
        orgMsp: (_a = params.orgMsp) !== null && _a !== void 0 ? _a : "CuratorOrg",
        apiUrl: params.apiUrl,
        userId: params.adminId,
        userSecret: params.adminPass,
        configPath: (_b = params.configPath) !== null && _b !== void 0 ? _b : defaultOpsApiConfigPath()
    };
}
function getBuilder(params) {
    const isApiUrlDefined = (p) => p.apiUrl !== undefined;
    if (isApiUrlDefined(params)) {
        const restApiParams = buildRestApiParams(params);
        return client_1.gcclient.forApiConfig(restApiParams);
    }
    else {
        const hfParams = buildHFParams(params);
        return client_1.gcclient.forConnectionProfile(hfParams);
    }
}
function createForCurator(user, contract) {
    const builder = getBuilder(defaultParams.CuratorOrg); // TODO override with user params??
    return builder
        .forContract(contract)
        .forUser(user.name)
        .extendAPI(client_1.commonContractAPI)
        .extendAPI((0, client_1.buildChainUserAPI)(user));
}
function createForUser(user, contract) {
    const builder = getBuilder(defaultParams.UsersOrg1);
    return builder
        .forContract(contract)
        .forUser(user.name)
        .extendAPI(client_1.commonContractAPI)
        .extendAPI((0, client_1.buildChainUserAPI)(user));
}
function createForPartner(user, contract) {
    const builder = getBuilder(defaultParams.PartnerOrg1);
    return builder
        .forContract(contract)
        .forUser(user.name)
        .extendAPI(client_1.commonContractAPI)
        .extendAPI((0, client_1.buildChainUserAPI)(user));
}
exports.ContractTestClient = {
    createForCurator: createForCurator,
    createForUser: createForUser,
    createForPartner: createForPartner,
    getBuilder: getBuilder
};
//# sourceMappingURL=ContractTestClient.js.map