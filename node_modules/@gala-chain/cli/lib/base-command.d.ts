import { Command, Interfaces } from "@oclif/core";
declare enum LogLevel {
    debug = "debug",
    info = "info",
    warn = "warn",
    error = "error"
}
export type Flags<T extends typeof Command> = Interfaces.InferredFlags<(typeof BaseCommand)["baseFlags"] & T["flags"]>;
export type Args<T extends typeof Command> = Interfaces.InferredArgs<T["args"]>;
export default abstract class BaseCommand<T extends typeof Command> extends Command {
    static enableJsonFlag: boolean;
    static baseFlags: {
        "log-level": Interfaces.OptionFlag<LogLevel | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    };
    protected flags: Flags<T>;
    protected args: Args<T>;
    init(): Promise<void>;
    protected catch(err: Error & {
        exitCode?: number;
    }): Promise<void>;
    protected finally(_: Error | undefined): Promise<void>;
}
export {};
