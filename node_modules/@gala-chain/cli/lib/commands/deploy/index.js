"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const core_1 = require("@oclif/core");
const base_command_1 = tslib_1.__importDefault(require("../../base-command"));
const galachain_utils_1 = require("../../galachain-utils");
class Deploy extends base_command_1.default {
    async run() {
        const { args, flags } = await this.parse(Deploy);
        const environment = flags.testnet ? "testnet" : "sandbox";
        const imageTag = args.imageTag;
        if (!imageTag.includes(":")) {
            this.log(`The image tag ${imageTag} is not valid. It should follow the pattern imageName:version.`);
            return;
        }
        const developerPrivateKey = await (0, galachain_utils_1.getPrivateKey)(args.developerPrivateKey);
        const response = await core_1.ux.prompt(`Are you sure you want to deploy to ${environment}? (y/n)`);
        if (response.toUpperCase() !== "Y") {
            this.log("Deployment cancelled.");
            return;
        }
        try {
            const response = await (0, galachain_utils_1.deployChaincode)({
                privateKey: developerPrivateKey,
                isTestnet: flags.testnet ?? false,
                imageTag: imageTag
            });
            this.log(`Deployment scheduled to ${environment}. Status ${response.status} for Chaincode ${response.chaincode} and Channel ${response.channel}.`);
        }
        catch (error) {
            this.log(`${error}`);
        }
    }
}
Deploy.description = "Schedules deployment of published chaincode Docker image to GalaChain sandbox.";
Deploy.examples = [
    "galachain deploy registry.image.name:latest",
    "galachain deploy registry.image.name:latest ./dev-private-key",
    "galachain deploy registry.image.name:latest c0fb1924408d936fb7cd0c86695885df4f66861621b5c8660df3924c4d09dd79"
];
Deploy.flags = {
    testnet: core_1.Flags.boolean({
        description: "Deploy to testnet instead of sandbox.",
        hidden: true
    })
};
Deploy.args = {
    imageTag: core_1.Args.string({
        char: "i",
        description: "Image tag to deploy. It should follow the pattern imageName:version.",
        required: true
    }),
    developerPrivateKey: core_1.Args.string({
        char: "k",
        description: "Optional private key to sign the data. It could be a file or a string. " +
            "If not provided, the private key will be read from the environment variable DEV_PRIVATE_KEY.",
        required: false
    })
};
exports.default = Deploy;
