"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const promises_1 = tslib_1.__importDefault(require("fs/promises"));
const path_1 = tslib_1.__importDefault(require("path"));
const dto_sign_1 = tslib_1.__importDefault(require("../../../src/commands/dto-sign"));
const dataTestJson = `{
  "tokenClass": {
    "collection": "CLITest",
    "category": "Currency",
    "type": "TEST",
    "additionalKey": "none"
  }
}`;
const fakePrivateKey = "45f2db331d77c0154c70be06d7d9fe00fa2b5471872f134d73a6e43c6b7e3d29";
describe("DtoSign Command", () => {
    it("it should check signature field in the response", async () => {
        const result = [];
        jest.spyOn(process.stdout, "write").mockImplementation((v) => {
            result.push(v);
            return true;
        });
        promises_1.default.readFile = jest.fn().mockResolvedValue(fakePrivateKey);
        const target = path_1.default.resolve(__dirname, "./test-key");
        await dto_sign_1.default.run([target, dataTestJson]);
        expect(result.join()).toContain(`tokenClass`);
        expect(result.join()).toContain(`signature`);
    });
    it("it should check DER signature field in the response", async () => {
        const result = [];
        jest.spyOn(process.stdout, "write").mockImplementation((v) => {
            result.push(v);
            return true;
        });
        promises_1.default.readFile = jest.fn().mockResolvedValue(fakePrivateKey);
        const target = path_1.default.resolve(__dirname, "./test-key");
        await dto_sign_1.default.run([target, dataTestJson, "-d"]);
        expect(result.join()).toContain(`tokenClass`);
        expect(result.join()).toContain(`signature`);
    });
    it("it should return only the signature", async () => {
        const result = [];
        jest.spyOn(process.stdout, "write").mockImplementation((v) => {
            result.push(v);
            return true;
        });
        promises_1.default.readFile = jest.fn().mockResolvedValue(fakePrivateKey);
        const target = path_1.default.resolve(__dirname, "./test-key");
        await dto_sign_1.default.run([target, dataTestJson, "-d"]);
        expect(result.join()).not.toBeNull();
    });
});
