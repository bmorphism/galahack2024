"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const core_1 = require("@oclif/core");
const base_command_1 = tslib_1.__importDefault(require("../../base-command"));
const galachain_utils_1 = require("../../galachain-utils");
class Info extends base_command_1.default {
    async run() {
        const { args, flags } = await this.parse(Info);
        const developerPrivateKey = await (0, galachain_utils_1.getPrivateKey)(args.developerPrivateKey);
        try {
            const response = await (0, galachain_utils_1.getDeploymentResponse)({
                privateKey: developerPrivateKey,
                isTestnet: flags.testnet ?? false
            });
            const chainCodeInfo = {
                org: response.org,
                channel: response.channel,
                chaincode: response.chaincode,
                imageName: response.imageName,
                status: response.status,
                lastOperationId: response.lastOperationId,
                adminPublicKey: response.adminPublicKey,
                isTestnet: response.isTestnet,
                lastUpdated: response.lastUpdated
            };
            this.log(`${JSON.stringify(chainCodeInfo, null, 2)}`);
        }
        catch (error) {
            this.error(`${error}`);
        }
    }
}
Info.description = "Show the ChainCode information.";
Info.examples = [
    "galachain info",
    "galachain info ./dev-private-key --testnet",
    "galachain info c0fb1924408d936fb7cd0c86695885df4f66861621b5c8660df3924c4d09dd79"
];
Info.flags = {
    testnet: core_1.Flags.boolean({
        description: "Get info from testnet instead of sandbox."
    })
};
Info.args = {
    developerPrivateKey: core_1.Args.string({
        char: "k",
        description: "Optional private key to sign the data. It could be a file or a string. " +
            "If not provided, the private key will be read from the environment variable DEV_PRIVATE_KEY.",
        required: false
    })
};
exports.default = Info;
