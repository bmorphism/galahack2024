"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const core_1 = require("@oclif/core");
const api_1 = require("@gala-chain/api");
const promises_1 = require("fs/promises");
const base_command_1 = tslib_1.__importDefault(require("../../base-command"));
const utils_1 = require("../../utils");
class DtoVerify extends base_command_1.default {
    async run() {
        const { args } = await this.parse(DtoVerify);
        const publicKey = await (0, promises_1.readFile)(args.key, "utf-8").catch((e) => {
            this.error(`Failed to read public key from flag: ${args.key}. ${e}`, { exit: 1 });
        });
        const dto = (await (0, utils_1.parseJsonFromStringOrFile)(args.data));
        if (dto.signature == null || dto.signature == undefined) {
            this.error("Signature is not present in the DTO.", { exit: 1 });
        }
        const signature = dto.signature;
        delete dto.signature;
        api_1.signatures.isValid(signature, dto, publicKey)
            ? this.log("Signature is valid.")
            : this.error("Signature is not valid.", { exit: 1 });
    }
}
DtoVerify.aliases = ["dto:verify"];
DtoVerify.description = "It verifies the signature in the DTO using the public key.";
DtoVerify.examples = [
    `galachain dto:verify ./publicKey '{
      "tokenClass": {
        "collection": "CLITest",
        "category": "Currency",
      },
      "signature": "/fYYooumRdFFrL4U3Nzwuf2uzBZAxKv4WrnMjLnbnJFU+Z6lQe2X/CCcLhRqq67jUDEFvOdky0g5D4sRCExXyBw=",
    }'`,
    "galachain dto:verify ./publicKey dto.json"
];
DtoVerify.args = {
    key: core_1.Args.string({
        char: "k",
        description: "File path to the public key.",
        required: true
    }),
    data: core_1.Args.string({
        char: "d",
        description: "Data representing an signed DTO object you wish to verify. Provide a JSON string " +
            "or a path to a valid JSON file.",
        required: true
    })
};
exports.default = DtoVerify;
