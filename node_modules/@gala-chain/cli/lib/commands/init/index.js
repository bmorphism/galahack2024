"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const core_1 = require("@oclif/core");
const fs = tslib_1.__importStar(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const base_command_1 = tslib_1.__importDefault(require("../../base-command"));
const exec_sync_1 = require("../../exec-sync");
const galachain_utils_1 = require("../../galachain-utils");
const utils_1 = require("../../utils");
class Init extends base_command_1.default {
    async run() {
        const { args } = await this.parse(Init);
        try {
            this.copyChaincodeTemplate(args.path);
            // Update the name field in the package.json and the package-lock.json to be `@gala-games/<project-name>`
            const fileName = (0, utils_1.getPathFileName)(args.path);
            const filesToUpdate = ["package.json", "package-lock.json"];
            filesToUpdate.forEach((fileToUpdate) => {
                const projectPath = path_1.default.join(args.path, fileToUpdate);
                try {
                    const fileContents = fs.readFileSync(projectPath, "utf8");
                    const packageJson = JSON.parse(fileContents);
                    packageJson.name = "@gala-chain/" + fileName;
                    fs.writeFileSync(projectPath, JSON.stringify(packageJson, null, 2), {
                        encoding: "utf8",
                        flag: "w"
                    });
                }
                catch (err) {
                    this.error(`Error updating project name in ${projectPath}: ${err}`);
                }
            });
            this.log(`Generating keys to ${args.path}/${galachain_utils_1.DEFAULT_PRIVATE_KEYS_DIR}`);
            await (0, galachain_utils_1.generateKeys)(`${args.path}/${galachain_utils_1.DEFAULT_PRIVATE_KEYS_DIR}`);
            this.log(`Project template initialized at ${args.path}`);
        }
        catch (error) {
            this.error(`Error initializing project template: ${error}`);
        }
    }
    copyChaincodeTemplate(destinationPath) {
        const sourceTemplateDir = path_1.default.resolve(require.resolve("."), "../../../chaincode-template");
        (0, exec_sync_1.execSync)(`cp -R ${sourceTemplateDir} ${destinationPath}`);
    }
}
Init.description = "Initialize a project template with Chain CLI.";
Init.examples = ["galachain init ./linux-mac-path/my-project-name"];
Init.args = {
    path: core_1.Args.string({
        char: "p",
        description: "Output path for project template.",
        required: true
    })
};
exports.default = Init;
