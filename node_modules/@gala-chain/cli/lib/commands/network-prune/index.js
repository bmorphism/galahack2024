"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const core_1 = require("@oclif/core");
const fablo_1 = require("fablo");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const base_command_1 = tslib_1.__importDefault(require("../../base-command"));
const consts_1 = require("../../consts");
const exec_sync_1 = require("../../exec-sync");
class NetworkPrune extends base_command_1.default {
    async run() {
        const { flags } = await this.parse(NetworkPrune);
        const fabloRoot = getFabloRoot(flags.fabloRoot);
        if (fabloRoot === undefined) {
            this.exit();
        }
        await fablo_1.Fablo.directory(fabloRoot)
            .then(() => downBrowserApi(fabloRoot))
            .execute("prune");
    }
}
NetworkPrune.aliases = ["network:prune"];
NetworkPrune.description = "Removes the network entirely.";
NetworkPrune.examples = ["galachain network:prune -r=./dir-target-netowrk"];
NetworkPrune.flags = {
    fabloRoot: core_1.Flags.string({
        char: "r",
        description: `Root directory of target network. By default '${consts_1.defaultFabloRoot}' is used.`,
        default: consts_1.defaultFabloRoot
    })
};
exports.default = NetworkPrune;
function downBrowserApi(fabloRoot) {
    try {
        (0, exec_sync_1.execSyncStdio)(`cd "${fabloRoot}/browser-api" && ./browser-api-compose.sh down`);
    }
    catch (e) {
        // just console.warn. Ignore because command cannot stop Fablo network
        console.warn(e);
    }
}
function getFabloRoot(fabloDir) {
    if (fs_1.default.existsSync(fabloDir)) {
        return path_1.default.resolve(fabloDir);
    }
    else {
        console.warn(`Directory '${fabloDir}' does not exist.`);
        return undefined;
    }
}
