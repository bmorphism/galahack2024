export interface CaConfig {
    domain: string;
    caHost: string;
    caPort: number;
}
export interface PeerConfig {
    domain: string;
    peerHost: string;
    peerPort: number;
}
export interface OrgConfig extends CaConfig, PeerConfig {
}
export declare function cppForCuratorBrowserApi(cryptoConfigRoot: string, channelNames: string[], localhostName: string, useTls: boolean, asLocalhost: boolean, useServiceDiscovery: boolean): {
    orderers?: {
        "orderer0.group1.orderer.local": {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    } | undefined;
    channels?: {} | undefined;
    name: string;
    version: string;
    client: {
        organization: string;
    };
    organizations: {
        CuratorOrg: {
            mspid: string;
            peers: string[];
            certificateAuthorities: string[];
        };
    };
    peers: {
        [x: string]: {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    };
    certificateAuthorities: {
        [x: string]: {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts?: undefined;
            url: string;
            caName: string;
        } | {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
            caName: string;
        };
    };
};
export declare function cppForCurator(cryptoConfigRoot: string, channelNames: string[], localhostName: string, useTls: boolean, asLocalhost: boolean, useServiceDiscovery: boolean): {
    orderers?: {
        "orderer0.group1.orderer.local": {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    } | undefined;
    channels?: {} | undefined;
    name: string;
    version: string;
    client: {
        organization: string;
    };
    organizations: {
        CuratorOrg: {
            mspid: string;
            peers: string[];
            certificateAuthorities: string[];
        };
    };
    peers: {
        [x: string]: {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    };
    certificateAuthorities: {
        [x: string]: {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts?: undefined;
            url: string;
            caName: string;
        } | {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
            caName: string;
        };
    };
};
export declare function cppForPartner(cryptoConfigRoot: string, channelNames: string[], localhostName: string, useTls: boolean, asLocalhost: boolean, useServiceDiscovery: boolean): {
    orderers?: {
        "orderer0.group1.orderer.local": {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    } | undefined;
    channels?: {} | undefined;
    name: string;
    version: string;
    client: {
        organization: string;
    };
    organizations: {
        PartnerOrg1: {
            mspid: string;
            peers: string[];
            certificateAuthorities: string[];
        };
    };
    peers: {
        [x: string]: {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    };
    certificateAuthorities: {
        [x: string]: {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts?: undefined;
            url: string;
            caName: string;
        } | {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
            caName: string;
        };
    };
};
export declare function cppForUsers(cryptoConfigRoot: string, channelNames: string[], localhostName: string, useTls: boolean, asLocalhost: boolean, useServiceDiscovery: boolean): {
    orderers?: {
        "orderer0.group1.orderer.local": {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    } | undefined;
    channels?: {} | undefined;
    name: string;
    version: string;
    client: {
        organization: string;
    };
    organizations: {
        CuratorOrg: {
            mspid: string;
            peers: string[];
        };
        PartnerOrg1: {
            mspid: string;
            peers: string[];
        };
        UsersOrg1: {
            mspid: string;
            certificateAuthorities: string[];
        };
    };
    peers: {
        [x: string]: {
            grpcOptions?: undefined;
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts?: undefined;
            url: string;
        } | {
            grpcOptions?: undefined;
            tlsCACerts: {
                path: string;
            };
            url: string;
        } | {
            grpcOptions: {
                "ssl-target-name-override": string;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
        };
    };
    certificateAuthorities: {
        [x: string]: {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts?: undefined;
            url: string;
            caName: string;
        } | {
            httpOptions: {
                verify: boolean;
            };
            tlsCACerts: {
                path: string;
            };
            url: string;
            caName: string;
        };
    };
};
export declare function getCPPs(cryptoConfigRoot: string, channelNames: string[], localhostName: string, useTls: boolean, asLocalhost: boolean, useServiceDiscovery: boolean): {
    curator: {
        orderers?: {
            "orderer0.group1.orderer.local": {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        } | undefined;
        channels?: {} | undefined;
        name: string;
        version: string;
        client: {
            organization: string;
        };
        organizations: {
            CuratorOrg: {
                mspid: string;
                peers: string[];
                certificateAuthorities: string[];
            };
        };
        peers: {
            [x: string]: {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        };
        certificateAuthorities: {
            [x: string]: {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts?: undefined;
                url: string;
                caName: string;
            } | {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
                caName: string;
            };
        };
    };
    partner: {
        orderers?: {
            "orderer0.group1.orderer.local": {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        } | undefined;
        channels?: {} | undefined;
        name: string;
        version: string;
        client: {
            organization: string;
        };
        organizations: {
            PartnerOrg1: {
                mspid: string;
                peers: string[];
                certificateAuthorities: string[];
            };
        };
        peers: {
            [x: string]: {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        };
        certificateAuthorities: {
            [x: string]: {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts?: undefined;
                url: string;
                caName: string;
            } | {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
                caName: string;
            };
        };
    };
    users: {
        orderers?: {
            "orderer0.group1.orderer.local": {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        } | undefined;
        channels?: {} | undefined;
        name: string;
        version: string;
        client: {
            organization: string;
        };
        organizations: {
            CuratorOrg: {
                mspid: string;
                peers: string[];
            };
            PartnerOrg1: {
                mspid: string;
                peers: string[];
            };
            UsersOrg1: {
                mspid: string;
                certificateAuthorities: string[];
            };
        };
        peers: {
            [x: string]: {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        };
        certificateAuthorities: {
            [x: string]: {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts?: undefined;
                url: string;
                caName: string;
            } | {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
                caName: string;
            };
        };
    };
};
export declare function getCPPsBrowserApi(cryptoConfigRoot: string, channelNames: string[], localhostName: string, useTls: boolean, asLocalhost: boolean, useServiceDiscovery: boolean): {
    curator: {
        orderers?: {
            "orderer0.group1.orderer.local": {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        } | undefined;
        channels?: {} | undefined;
        name: string;
        version: string;
        client: {
            organization: string;
        };
        organizations: {
            CuratorOrg: {
                mspid: string;
                peers: string[];
                certificateAuthorities: string[];
            };
        };
        peers: {
            [x: string]: {
                grpcOptions?: undefined;
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts?: undefined;
                url: string;
            } | {
                grpcOptions?: undefined;
                tlsCACerts: {
                    path: string;
                };
                url: string;
            } | {
                grpcOptions: {
                    "ssl-target-name-override": string;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
            };
        };
        certificateAuthorities: {
            [x: string]: {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts?: undefined;
                url: string;
                caName: string;
            } | {
                httpOptions: {
                    verify: boolean;
                };
                tlsCACerts: {
                    path: string;
                };
                url: string;
                caName: string;
            };
        };
    };
};
