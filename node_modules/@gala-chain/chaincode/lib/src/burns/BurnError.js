"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UseAllowancesFailedError = exports.InsufficientBurnAllowanceError = exports.BurnTokensFailedError = exports.NftMultipleBurnNotAllowedError = exports.InsufficientBalanceError = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const AllowanceError_1 = require("../allowances/AllowanceError");
class InsufficientBalanceError extends api_1.ValidationFailedError {
    constructor(owner, spendableQuantity, quantity, tokenInstanceKey) {
        super(`${owner} does not have sufficient balance (${spendableQuantity.toFixed()}) ` +
            `to Burn ${quantity.toFixed()} of token ${tokenInstanceKey}`, { owner, spendableQuantity, quantity, tokenInstanceKey });
    }
}
exports.InsufficientBalanceError = InsufficientBalanceError;
class NftMultipleBurnNotAllowedError extends api_1.ValidationFailedError {
    constructor(tokenInstanceKey) {
        super(`Cannot burn multiple NFT instances at once: ${tokenInstanceKey}`, { tokenInstanceKey });
    }
}
exports.NftMultipleBurnNotAllowedError = NftMultipleBurnNotAllowedError;
class BurnTokensFailedError extends api_1.DefaultError {
    constructor(message, payload) {
        super(`BurnTokens failed: ${message}`, payload);
    }
}
exports.BurnTokensFailedError = BurnTokensFailedError;
class InsufficientBurnAllowanceError extends AllowanceError_1.InsufficientAllowanceError {
    constructor(user, allowedQuantity, quantity, tokenInstanceKey, toPersonKey) {
        super(user, allowedQuantity, api_1.AllowanceType.Burn, quantity, tokenInstanceKey, toPersonKey);
    }
}
exports.InsufficientBurnAllowanceError = InsufficientBurnAllowanceError;
class UseAllowancesFailedError extends api_1.DefaultError {
    constructor(quantity, tokenInstanceKey, owner) {
        super(`UseAllowances failed for action: Burn ${quantity.toFixed()} token ${tokenInstanceKey} for ${owner}`, { quantity, tokenInstanceKey, owner });
    }
}
exports.UseAllowancesFailedError = UseAllowancesFailedError;
