import { ChainCallDTO, ClassConstructor, GalaChainResponse, Inferred, MethodAPI, Primitive } from "@gala-chain/api";
import { GalaChainContext } from "../types";
import { GalaContract } from "./GalaContract";
declare enum GalaTransactionType {
    EVALUATE = 0,
    SUBMIT = 1
}
declare const SUBMIT: GalaTransactionType, EVALUATE: GalaTransactionType;
type GalaTransactionDecoratorFunction = (target: GalaContract, propertyKey: string, descriptor: TypedPropertyDescriptor<Function>) => void;
type OutType = ClassConstructor<unknown> | Primitive;
type OutArrType = {
    arrayOf: OutType;
};
export type GalaTransactionBeforeFn = (ctx: GalaChainContext, dto: ChainCallDTO) => Promise<void>;
export type GalaTransactionAfterFn = (ctx: GalaChainContext, dto: ChainCallDTO, result: GalaChainResponse<unknown>) => Promise<unknown>;
export interface GalaTransactionOptions<T extends ChainCallDTO> {
    type: GalaTransactionType;
    description?: string;
    in?: ClassConstructor<Inferred<T>>;
    out?: OutType | OutArrType;
    allowedOrgs?: string[];
    verifySignature?: true;
    apiMethodName?: string;
    sequence?: MethodAPI[];
    enforceUniqueKey?: true;
    before?: GalaTransactionBeforeFn;
    after?: GalaTransactionAfterFn;
}
type GalaSubmitOptions<T extends ChainCallDTO> = Omit<Omit<GalaTransactionOptions<T>, "type">, "verifySignature">;
type GalaEvaluateOptions<T extends ChainCallDTO> = Omit<Omit<GalaTransactionOptions<T>, "type">, "verifySignature">;
declare function Submit<T extends ChainCallDTO>(options: GalaSubmitOptions<T>): GalaTransactionDecoratorFunction;
declare function Evaluate<T extends ChainCallDTO>(options: GalaEvaluateOptions<T>): GalaTransactionDecoratorFunction;
declare function GalaTransaction<T extends ChainCallDTO>(options: GalaTransactionOptions<T>): GalaTransactionDecoratorFunction;
export { Submit, Evaluate, SUBMIT, EVALUATE, GalaTransaction };
