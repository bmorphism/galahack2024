"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApiMethods = exports.updateApi = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
// singleton object containing the API
const api = {};
// eslint-disable-next-line @typescript-eslint/ban-types
function updateApi(target, methodApi) {
    var _a, _b;
    const className = (_a = target.constructor) === null || _a === void 0 ? void 0 : _a.name;
    if (className === undefined) {
        throw new api_1.RuntimeError(`target.constructor?.name is undefined on ${target}`);
    }
    if (!api[className]) {
        const parentClassName = Object.getPrototypeOf(target).constructor.name;
        api[className] = [...((_b = api[parentClassName]) !== null && _b !== void 0 ? _b : [])]; // copy all from parent class
    }
    api[className].push(methodApi);
    api[className].sort((a, b) => a.methodName.localeCompare(b.methodName));
}
exports.updateApi = updateApi;
// eslint-disable-next-line @typescript-eslint/ban-types
function getApiMethods(target) {
    var _a, _b;
    const className = (_a = target.constructor) === null || _a === void 0 ? void 0 : _a.name;
    return (_b = api === null || api === void 0 ? void 0 : api[className]) !== null && _b !== void 0 ? _b : [];
}
exports.getApiMethods = getApiMethods;
