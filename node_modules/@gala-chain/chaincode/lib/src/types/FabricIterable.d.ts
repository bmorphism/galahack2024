import { Iterators } from "fabric-shim";
export declare const asyncIterator: <T>(arr: T[]) => AsyncIterator<T, any, undefined>;
export declare const filter: <T>(include: (_: T) => boolean, iterator: AsyncIterator<T, any, undefined>) => AsyncIterator<T, any, undefined>;
export declare const prepend: <T>(arr: T[], iterator: AsyncIterator<T, any, undefined>) => AsyncIterator<T, any, undefined>;
export type FabricIterable<T> = Promise<Iterators.CommonIterator<T>> & AsyncIterable<T>;
export interface CachedKV {
    key: string;
    value: Uint8Array;
    namespace?: string;
}
export declare const fabricIterable: <T>(iterator: AsyncIterator<T, any, undefined>) => FabricIterable<T>;
