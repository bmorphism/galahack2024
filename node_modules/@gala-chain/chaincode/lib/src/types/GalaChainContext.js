"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GalaChainContext = exports.getParentSpanContext = exports.traceContextFromTransientData = exports.traceContextFromDtoString = exports.createDDCompatibleSpanContext = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const fabric_contract_api_1 = require("fabric-contract-api");
const GalaChainStub_1 = require("./GalaChainStub");
const GalaLoggerInstance_1 = require("./GalaLoggerInstance");
// note this is different from SpanContext from opentracing standard
function createDDCompatibleSpanContext({ spanId, traceId }, name) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const DatadogSpanContext = require("dd-trace/packages/dd-trace/src/opentracing/span_context");
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const id = require("dd-trace/packages/dd-trace/src/id");
    return new DatadogSpanContext({ traceId: id(traceId, 10), spanId: id(spanId, 10), name });
}
exports.createDDCompatibleSpanContext = createDDCompatibleSpanContext;
function traceContextFromDtoString(s) {
    try {
        const { trace } = JSON.parse(s);
        if (typeof (trace === null || trace === void 0 ? void 0 : trace.traceId) === "string" && typeof (trace === null || trace === void 0 ? void 0 : trace.spanId) === "string") {
            return trace;
        }
        else {
            return undefined;
        }
    }
    catch (e) {
        return undefined;
    }
}
exports.traceContextFromDtoString = traceContextFromDtoString;
function traceContextFromTransientData(transientMap) {
    var _a;
    try {
        const str = (_a = transientMap.get("spanContext")) === null || _a === void 0 ? void 0 : _a.toString();
        if (str === undefined) {
            return undefined;
        }
        const { traceId, spanId } = JSON.parse(str);
        if (typeof traceId !== "string" || typeof spanId !== "string") {
            return undefined;
        }
        else {
            return { spanId, traceId };
        }
    }
    catch (e) {
        return undefined;
    }
}
exports.traceContextFromTransientData = traceContextFromTransientData;
function getParentSpanContext(stub) {
    var _a;
    try {
        const { fcn, params } = stub.getFunctionAndParameters();
        const t = (_a = traceContextFromDtoString(params[0])) !== null && _a !== void 0 ? _a : traceContextFromTransientData(stub.getTransient());
        return t === undefined ? undefined : createDDCompatibleSpanContext(t, fcn);
    }
    catch (e) {
        return undefined;
    }
}
exports.getParentSpanContext = getParentSpanContext;
function getTxUnixTime(ctx) {
    const txTimestamp = ctx.stub.getTxTimestamp();
    // Convert time to milliseconds by multiplying seconds and dividing nanoseconds
    const txUnixTime = txTimestamp.seconds.toNumber() * 1000 + txTimestamp.nanos / 10 ** 6;
    return Math.floor(txUnixTime);
}
class GalaChainContext extends fabric_contract_api_1.Context {
    get logger() {
        if (this.loggerInstance === undefined) {
            this.loggerInstance = new GalaLoggerInstance_1.GalaLoggerInstanceImpl(this);
        }
        return this.loggerInstance;
    }
    get callingUser() {
        if (this.callingUserValue === undefined) {
            throw new api_1.UnauthorizedError("No calling user set");
        }
        return this.callingUserValue;
    }
    get callingUserEthAddress() {
        if (this.callingUserEthAddressValue === undefined) {
            throw new api_1.UnauthorizedError(`No eth address known for user ${this.callingUserValue}`);
        }
        return this.callingUserEthAddressValue;
    }
    set callingUserData(d) {
        if (this.callingUserValue !== undefined) {
            throw new Error("Calling user already set to " + this.callingUserValue);
        }
        this.callingUserValue = d.alias;
        this.callingUserEthAddressValue = d.ethAddress;
    }
    get txUnixTime() {
        if (this.txUnixTimeValue === undefined) {
            this.txUnixTimeValue = getTxUnixTime(this);
        }
        return this.txUnixTimeValue;
    }
    setChaincodeStub(stub) {
        const galaChainStub = (0, GalaChainStub_1.createGalaChainStub)(stub);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore - missing typings for `setChaincodeStub` in `fabric-contract-api`
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        super.setChaincodeStub(galaChainStub);
        // set parent context
        this.span = getParentSpanContext(stub);
    }
}
exports.GalaChainContext = GalaChainContext;
