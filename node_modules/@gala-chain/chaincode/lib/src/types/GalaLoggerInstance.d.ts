import { Context } from "fabric-contract-api";
import * as winston from "winston";
import { Logger } from "winston";
import { GalaChainContext } from ".";
export declare function createReadableLogger(logLevel?: string): winston.LoggerOptions;
export declare function createJsonLogger(logLevel?: string): winston.LoggerOptions;
export declare function winstonConfig(): winston.LoggerOptions;
export declare const createLoggerInstance: (ctx: Context) => Logger;
export interface GalaLoggerInstance {
    getLogger(name?: string): Logger;
    error(message: string): void;
    warn(message: string): void;
    info(message: string): void;
    debug(message: string): void;
    log(level: "debug" | "info" | "warn" | "error", msg: string | (Record<string, unknown> & {
        message: string;
    })): void;
    logTimeline(timelineActionDescription: string, context: string, metaData?: unknown[], error?: Error): void;
}
export declare class GalaLoggerInstanceImpl implements GalaLoggerInstance {
    instance: Logger;
    private readonly prefix;
    private readonly ctx;
    private readonly uniqueId;
    private readonly createdAt;
    constructor(ctx: GalaChainContext);
    private get commonProcess();
    private get commonContext();
    private get commonMeta();
    private get timeElapsed();
    private get uptime();
    private get createdAtDate();
    setLevel(level: string): void;
    getLogger(name?: string): Logger;
    error(message: string): void;
    warn(message: string): void;
    info(message: string): void;
    debug(message: string): void;
    log(level: "debug" | "info" | "warn" | "error", msg: string | (Record<string, unknown> & {
        message: string;
    })): void;
    getElapsedNanos(): bigint;
    logTimeline(timelineActionDescription: string, context: string, metaData?: unknown[], error?: Error | null): void;
}
