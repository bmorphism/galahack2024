import { ChainObject, ClassConstructor, DefaultError, Inferred, NotFoundError, RangedChainObject, ValidationFailedError } from "@gala-chain/api";
import { QueryResponseMetadata } from "fabric-shim";
import { GalaChainContext } from "../types";
export declare class ObjectNotFoundError extends NotFoundError {
    constructor(objectId: string);
}
export declare class NoObjectIdsError extends ValidationFailedError {
    constructor();
}
export declare class InvalidResultsError extends DefaultError {
    constructor(messages: string[]);
}
export declare function putChainObject(ctx: GalaChainContext, data: ChainObject): Promise<void>;
export declare function putRangedChainObject(ctx: GalaChainContext, data: RangedChainObject): Promise<void>;
export declare function deleteChainObject(ctx: GalaChainContext, data: ChainObject): Promise<void>;
export declare function getObjectsByPartialCompositeKey<T extends ChainObject>(ctx: GalaChainContext, objectType: string, attributes: string[], constructor: ClassConstructor<Inferred<T, ChainObject>>): Promise<Array<T>>;
export declare function getObjectsByPartialCompositeKeyWithPagination<T extends ChainObject>(ctx: GalaChainContext, objectType: string, attributes: string[], constructor: ClassConstructor<Inferred<T, ChainObject>>, bookmark: string | undefined, limit?: number): Promise<{
    results: Array<T>;
    metadata: QueryResponseMetadata;
}>;
export declare function getObjectByKey<T extends ChainObject>(ctx: GalaChainContext, constructor: ClassConstructor<Inferred<T, ChainObject>>, objectId: string): Promise<T>;
export declare function getPlainObjectByKey(ctx: GalaChainContext, objectId: string): Promise<Record<string, unknown>>;
export declare function getObjectHistory(ctx: GalaChainContext, objectId: string): Promise<{
    history: unknown[];
}>;
/**
 * Gets objects by keys and returns them in the same order as in `projectIds` parameter.
 * If getting at least one object fails, throws an exception.
 */
export declare function getObjectsByKeys<T extends ChainObject>(ctx: GalaChainContext, constructor: ClassConstructor<Inferred<T, ChainObject>>, objectIds: Array<string>): Promise<Array<T>>;
export declare function objectExists(ctx: GalaChainContext, id: string): Promise<boolean>;
