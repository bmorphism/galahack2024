"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchBalancesWithTokenMetadata = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const api_2 = require("@gala-chain/api");
const class_transformer_1 = require("class-transformer");
const utils_1 = require("../utils");
const BalanceError_1 = require("./BalanceError");
async function fetchBalancesWithTokenMetadata(ctx, data) {
    const queryParams = (0, utils_1.takeUntilUndefined)(data.owner, data.collection, data.category, data.type, data.additionalKey);
    const balancesLookup = await (0, utils_1.getObjectsByPartialCompositeKeyWithPagination)(ctx, api_2.TokenBalance.INDEX_KEY, queryParams, api_2.TokenBalance, data.bookmark, data.limit).catch((e) => {
        throw api_1.ChainError.map(e, api_1.ErrorCode.NOT_FOUND, new BalanceError_1.BalanceNotFoundError(data.owner));
    });
    const results = [];
    const balances = balancesLookup.results;
    for (const balance of balances) {
        const keyList = [balance.collection, balance.category, balance.type, balance.additionalKey];
        const compositeKey = api_1.ChainObject.getCompositeKeyFromParts(api_2.TokenClass.INDEX_KEY, keyList);
        const tokenClass = await (0, utils_1.getObjectByKey)(ctx, api_2.TokenClass, compositeKey);
        const balanceWithTokenMetadata = (0, class_transformer_1.plainToInstance)(api_2.TokenBalanceWithMetadata, {
            balance: balance,
            token: tokenClass
        });
        results.push(balanceWithTokenMetadata);
    }
    const response = (0, class_transformer_1.plainToInstance)(api_2.FetchBalancesWithTokenMetadataResponse, {
        bookmark: balancesLookup.metadata.bookmark,
        results: results
    });
    return response;
}
exports.fetchBalancesWithTokenMetadata = fetchBalancesWithTokenMetadata;
