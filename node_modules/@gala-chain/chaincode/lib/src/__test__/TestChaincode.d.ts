import { ClassConstructor } from "@gala-chain/api";
import { Contract } from "fabric-contract-api";
type InvokeResponse = Record<string, unknown> | Array<Record<string, unknown>>;
/** @deprecated */
export default class TestChaincode {
    readonly state: Record<string, string>;
    readonly writes: Record<string, string>;
    callingUser: string;
    readonly callHistory: unknown[];
    private readonly chaincode;
    constructor(contracts: ClassConstructor<Contract>[], state?: Record<string, string>, writes?: Record<string, string>, callingUser?: string, callHistory?: unknown[]);
    setCallingUser(user: string): TestChaincode;
    invoke<T = InvokeResponse>(method: string, ...args: (string | {
        serialize: () => string;
    })[]): Promise<T>;
    getContractInstance<T extends Contract>(contractClass: {
        new (...args: unknown[]): T;
    } & Function): T;
}
export {};
