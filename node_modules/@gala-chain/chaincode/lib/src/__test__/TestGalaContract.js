"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Superhero = exports.SuperheroQueryDto = exports.SuperheroDto = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const api_1 = require("@gala-chain/api");
const api_2 = require("@gala-chain/api");
const class_transformer_1 = require("class-transformer");
const fabric_contract_api_1 = require("fabric-contract-api");
const package_json_1 = require("../../package.json");
const contracts_1 = require("../contracts");
const types_1 = require("../types");
const state_1 = require("../utils/state");
class SuperheroDto extends api_1.ChainCallDTO {
    static create(name, age) {
        const dto = new SuperheroDto();
        dto.name = name;
        dto.age = age;
        return dto;
    }
}
exports.SuperheroDto = SuperheroDto;
class SuperheroQueryDto extends api_1.ChainCallDTO {
}
exports.SuperheroQueryDto = SuperheroQueryDto;
class Superhero extends api_1.ChainObject {
}
exports.Superhero = Superhero;
Superhero.INDEX_KEY = "superhero";
tslib_1.__decorate([
    (0, api_1.ChainKey)({ position: 0 }),
    tslib_1.__metadata("design:type", String)
], Superhero.prototype, "name", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", String)
], Superhero, "INDEX_KEY", void 0);
class TestGalaContract extends contracts_1.GalaContract {
    constructor() {
        super("TestGalaContract", package_json_1.version);
    }
    async Put(ctx, key, value) {
        return api_1.GalaChainResponse.Success(await ctx.stub.putState(key, Buffer.from(value)));
    }
    async Get(ctx, key) {
        return api_1.GalaChainResponse.Success((await ctx.stub.getState(key)).toString());
    }
    async ErrorAfterPut(ctx, key, value) {
        try {
            await this.Put(ctx, key, value);
            throw new api_2.NotImplementedError("Some error after put was invoked");
        }
        catch (e) {
            return api_1.GalaChainResponse.Error(e);
        }
    }
    async IncrementTwiceWrong(ctx, key) {
        const getOrZero = async () => { var _a; return (_a = +(await ctx.stub.getState(key)).toString()) !== null && _a !== void 0 ? _a : 0; };
        const incrementedFirstTime = (await getOrZero()) + 1;
        await ctx.stub.putState(key, Buffer.from(incrementedFirstTime.toString()));
        // This is intentional to verify this works - gets 0 in this place, because Fabric works
        // this way. At the end the value is incremented only once.
        const incrementedSecondTime = (await getOrZero()) + 1;
        await ctx.stub.putState(key, Buffer.from(incrementedSecondTime.toString()));
        return api_1.GalaChainResponse.Success(undefined);
    }
    async CreateSuperhero(ctx, dto) {
        ctx.logger.info(`Creating superhero ${dto.name}`);
        const superhero = new Superhero();
        superhero.name = dto.name;
        superhero.age = dto.age;
        await (0, state_1.putChainObject)(ctx, superhero);
        return api_1.GalaChainResponse.Success(undefined);
    }
    async QuerySuperheroes(ctx, dto) {
        // populate cache with saves
        await Promise.all(dto.saveBeforeReturn.map(async (s) => {
            const superhero = await (0, types_1.createValidChainObject)(Superhero, s);
            await (0, state_1.putChainObject)(ctx, superhero);
        }));
        return (0, state_1.getObjectsByPartialCompositeKey)(ctx, Superhero.INDEX_KEY, [], Superhero);
    }
}
exports.default = TestGalaContract;
tslib_1.__decorate([
    (0, fabric_contract_api_1.Transaction)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [types_1.GalaChainContext, String, String]),
    tslib_1.__metadata("design:returntype", Promise)
], TestGalaContract.prototype, "Put", null);
tslib_1.__decorate([
    (0, fabric_contract_api_1.Transaction)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [types_1.GalaChainContext, String]),
    tslib_1.__metadata("design:returntype", Promise)
], TestGalaContract.prototype, "Get", null);
tslib_1.__decorate([
    (0, fabric_contract_api_1.Transaction)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [types_1.GalaChainContext, String, String]),
    tslib_1.__metadata("design:returntype", Promise)
], TestGalaContract.prototype, "ErrorAfterPut", null);
tslib_1.__decorate([
    (0, fabric_contract_api_1.Transaction)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [types_1.GalaChainContext, String]),
    tslib_1.__metadata("design:returntype", Promise)
], TestGalaContract.prototype, "IncrementTwiceWrong", null);
tslib_1.__decorate([
    (0, contracts_1.GalaTransaction)({
        type: contracts_1.SUBMIT,
        in: SuperheroDto,
        allowedOrgs: ["CuratorOrg"]
    }),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [types_1.GalaChainContext, SuperheroDto]),
    tslib_1.__metadata("design:returntype", Promise)
], TestGalaContract.prototype, "CreateSuperhero", null);
tslib_1.__decorate([
    (0, contracts_1.GalaTransaction)({
        type: contracts_1.EVALUATE,
        in: SuperheroQueryDto,
        out: "object"
    }),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [types_1.GalaChainContext, SuperheroQueryDto]),
    tslib_1.__metadata("design:returntype", Promise)
], TestGalaContract.prototype, "QuerySuperheroes", null);
