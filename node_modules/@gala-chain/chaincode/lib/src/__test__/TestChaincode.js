"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const test_1 = require("@gala-chain/test");
const utils_1 = require("../utils");
const ChaincodeFromContract = 
// eslint-disable-next-line @typescript-eslint/no-var-requires
require("fabric-shim/lib/contract-spi/chaincodefromcontract");
const serializers = {
    transaction: "galaJsonSerializer",
    serializers: {
        galaJsonSerializer: utils_1.GalaJSONSerializer
    }
};
/** @deprecated */
class TestChaincode {
    constructor(contracts, state = {}, writes = {}, callingUser = "client|admin", callHistory = []) {
        this.state = state;
        this.writes = writes;
        this.callingUser = callingUser;
        this.callHistory = callHistory;
        const getCurrentCallingUser = () => {
            const [prefix, userId] = this.callingUser.split("|");
            if (userId === undefined) {
                throw new Error("invalid calling user, expected format: client|userId");
            }
            else {
                return { userId, prefix };
            }
        };
        const contractsWrapped = contracts.map((c) => {
            const wrapped = class extends c {
                beforeTransaction(ctx) {
                    const { userId, prefix } = getCurrentCallingUser();
                    callHistory.push({ ...ctx.stub.getFunctionAndParameters(), callingUser: `${prefix}|${userId}` });
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    ctx.clientIdentity.id = `x509::/OU=${prefix}/CN=${userId}:`;
                    return super.beforeTransaction(ctx);
                }
            };
            // ensure we have the same name as the original class
            Object.defineProperty(wrapped, "name", { value: c.name });
            return wrapped;
        });
        this.chaincode = new ChaincodeFromContract(contractsWrapped, serializers, {}, "gala-chain-test", "0.0.1");
    }
    setCallingUser(user) {
        this.callingUser = user;
        return this;
    }
    async invoke(method, ...args) {
        const argsSerialized = args.map((arg) => (typeof arg === "string" ? arg : arg.serialize()));
        const stub = new test_1.TestChaincodeStub([method, ...argsSerialized], this.state, this.writes);
        const rawResponse = await this.chaincode.Invoke(stub);
        if (rawResponse.status === 200) {
            const stringResponse = rawResponse.payload.toString();
            return JSON.parse(stringResponse);
        }
        else {
            throw rawResponse.message;
        }
    }
    getContractInstance(
    // eslint-disable-next-line @typescript-eslint/ban-types
    contractClass) {
        // The code below accesses internals of chaincode implementation
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
        const data = this.chaincode.contractImplementations[contractClass.name];
        if (data === undefined) {
            throw new api_1.NotImplementedError(`Cannot get contract instance for ${contractClass.name}`);
        }
        else {
            return data.contractInstance;
        }
    }
}
exports.default = TestChaincode;
