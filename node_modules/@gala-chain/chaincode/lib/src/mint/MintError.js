"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsufficientMintAllowanceError = exports.BatchMintError = exports.UseAllowancesFailedError = exports.NftMaxMintError = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const AllowanceError_1 = require("../allowances/AllowanceError");
class NftMaxMintError extends api_1.ValidationFailedError {
    constructor(quantity) {
        super(`Quantity provided (${quantity}) exceeds max mint size for NFTs: ${api_1.MintTokenDto.MAX_NFT_MINT_SIZE}.`, {
            quantity,
            maxMint: api_1.MintTokenDto.MAX_NFT_MINT_SIZE
        });
    }
}
exports.NftMaxMintError = NftMaxMintError;
class UseAllowancesFailedError extends api_1.DefaultError {
    constructor(quantity, tokenInstanceKey, owner) {
        super(`UseAllowances failed for action: Mint ${quantity.toFixed()} token ${tokenInstanceKey} to ${owner}`, { quantity, tokenInstanceKey, owner });
    }
}
exports.UseAllowancesFailedError = UseAllowancesFailedError;
class BatchMintError extends api_1.DefaultError {
    constructor(errorMessages) {
        super(`No token was minted. Errors: ${errorMessages.join("; ")}.`, { errorMessages });
    }
}
exports.BatchMintError = BatchMintError;
class InsufficientMintAllowanceError extends AllowanceError_1.InsufficientAllowanceError {
    constructor(user, allowedQuantity, quantity, tokenInstanceKey, toPersonKey) {
        super(user, allowedQuantity, api_1.AllowanceType.Mint, quantity, tokenInstanceKey, toPersonKey);
    }
}
exports.InsufficientMintAllowanceError = InsufficientMintAllowanceError;
