"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTokenClassWithKnownSupply = exports.fetchTokenClassesWithSupply = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const fetchBurns_1 = require("../burns/fetchBurns");
const TokenError_1 = require("../token/TokenError");
const utils_1 = require("../utils");
const fetchMintAllowanceSupply_1 = require("./fetchMintAllowanceSupply");
const fetchMintSupply_1 = require("./fetchMintSupply");
async function fetchTokenClassesWithSupply(ctx, tokenClasses) {
    const fetchOps = tokenClasses.map((c) => fetchTokenClassWithKnownSupply(ctx, c));
    return await Promise.all(fetchOps);
}
exports.fetchTokenClassesWithSupply = fetchTokenClassesWithSupply;
async function fetchTokenClassWithKnownSupply(ctx, tokenClassKey) {
    const tokenClass = await (0, utils_1.getObjectByKey)(ctx, api_1.TokenClass, api_1.TokenClass.buildTokenClassCompositeKey(tokenClassKey)).catch(() => {
        throw new TokenError_1.TokenClassNotFoundError(tokenClassKey.toStringKey());
    });
    const knownMintAllowanceSupply = await (0, fetchMintAllowanceSupply_1.fetchMintAllowanceSupply)(ctx, tokenClass, 0);
    tokenClass.knownMintAllowanceSupply = knownMintAllowanceSupply;
    const knownMintSupply = await (0, fetchMintSupply_1.fetchMintSupply)(ctx, tokenClass, 0);
    tokenClass.knownMintSupply = knownMintSupply;
    const totalBurned = await (0, fetchBurns_1.fetchKnownBurnCount)(ctx, tokenClass);
    tokenClass.totalBurned = totalBurned;
    return tokenClass;
}
exports.fetchTokenClassWithKnownSupply = fetchTokenClassWithKnownSupply;
