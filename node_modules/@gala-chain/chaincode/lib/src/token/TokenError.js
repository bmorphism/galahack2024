"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidDecimalError = exports.NftInstanceAllowanceMismatchError = exports.NotATokenAuthorityError = exports.TokenClassNotFoundError = exports.TokenAlreadyExistsError = exports.NftDecimalError = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
class NftDecimalError extends api_1.ValidationFailedError {
    constructor(decimals) {
        super(`Decimals for NFT should be 0 (got ${decimals})`, { decimals });
    }
}
exports.NftDecimalError = NftDecimalError;
class TokenAlreadyExistsError extends api_1.ConflictError {
    constructor(tokenClassKey) {
        super(`A token with ID ${tokenClassKey} already exists`, { tokenClassKey });
    }
}
exports.TokenAlreadyExistsError = TokenAlreadyExistsError;
class TokenClassNotFoundError extends api_1.NotFoundError {
    constructor(tokenClassKey) {
        super(`Token class not found: ${tokenClassKey}`, { tokenClassKey });
    }
}
exports.TokenClassNotFoundError = TokenClassNotFoundError;
class NotATokenAuthorityError extends api_1.ForbiddenError {
    constructor(user, tokenClassKey, authorities) {
        super(`User ${user} is not an authority for Token ${tokenClassKey}. ` +
            `Authorities: ${authorities.join(", ")}`, { user, tokenClassKey, authorities });
    }
}
exports.NotATokenAuthorityError = NotATokenAuthorityError;
class NftInstanceAllowanceMismatchError extends api_1.ValidationFailedError {
    constructor(instance, allowanceType) {
        super(`For NFTs Mint Allowances require an instance id of zero. ` +
            `All other allowance types require a non-zero instance id. ` +
            `Instance id: (${instance}). AllowanceType: ${allowanceType}.`, { instance });
    }
}
exports.NftInstanceAllowanceMismatchError = NftInstanceAllowanceMismatchError;
class InvalidDecimalError extends api_1.ValidationFailedError {
    constructor(quantity, decimals) {
        super(`Quantity: ${quantity} has more than ${decimals} decimal places.`, { quantity, decimals });
    }
}
exports.InvalidDecimalError = InvalidDecimalError;
