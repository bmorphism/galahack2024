"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicKeyService = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const PublicKeyError_1 = require("./PublicKeyError");
class PublicKeyService {
    static getPublicKeyKey(ctx, userId) {
        return ctx.stub.createCompositeKey(PublicKeyService.PK_INDEX_KEY, [userId]);
    }
    static getUserProfileKey(ctx, ethAddress) {
        return ctx.stub.createCompositeKey(PublicKeyService.UP_INDEX_KEY, [ethAddress]);
    }
    static async putPublicKey(ctx, publicKey, userId) {
        const key = PublicKeyService.getPublicKeyKey(ctx, userId || ctx.callingUser);
        const obj = new api_1.PublicKey();
        obj.publicKey = PublicKeyService.normalizePublicKey(publicKey);
        const data = Buffer.from(obj.serialize());
        await ctx.stub.putState(key, data);
    }
    static async putUserProfile(ctx, ethAddress, userAlias) {
        const key = PublicKeyService.getUserProfileKey(ctx, ethAddress);
        const obj = new api_1.UserProfile();
        obj.ethAddress = ethAddress;
        obj.alias = userAlias;
        const data = Buffer.from(obj.serialize());
        await ctx.stub.putState(key, data);
    }
    static async deleteUserProfile(ctx, ethAddress) {
        const key = PublicKeyService.getUserProfileKey(ctx, ethAddress);
        await ctx.stub.deleteState(key);
    }
    static async getUserProfile(ctx, ethAddress) {
        const key = PublicKeyService.getUserProfileKey(ctx, ethAddress);
        const data = await ctx.stub.getState(key);
        if (data.length > 0) {
            const userProfile = api_1.ChainObject.deserialize(api_1.UserProfile, data.toString());
            return userProfile;
        }
        // check if we want the profile of the admin
        if (process.env.DEV_ADMIN_PUBLIC_KEY !== undefined && process.env.DEV_ADMIN_USER_ID !== undefined) {
            const adminEthAddress = api_1.signatures.getEthAddress(process.env.DEV_ADMIN_PUBLIC_KEY);
            if (adminEthAddress === ethAddress) {
                const message = `User Profile is not saved on chain for user ${adminEthAddress}. ` +
                    `But env variables DEV_ADMIN_USER_ID and DEV_ADMIN_PUBLIC_KEY are set for the user. ` +
                    `Thus, the public key from env will be used.`;
                ctx.logging.getLogger().warn(message);
                const adminProfile = new api_1.UserProfile();
                adminProfile.ethAddress = adminEthAddress;
                adminProfile.alias = process.env.DEV_ADMIN_USER_ID;
                return adminProfile;
            }
        }
        return undefined;
    }
    static async getPublicKey(ctx, userId) {
        const key = PublicKeyService.getPublicKeyKey(ctx, userId);
        const data = await ctx.stub.getState(key);
        if (data.length > 0) {
            const publicKey = api_1.ChainObject.deserialize(api_1.PublicKey, data.toString());
            return publicKey;
        }
        if (userId === process.env.DEV_ADMIN_USER_ID && process.env.DEV_ADMIN_PUBLIC_KEY !== undefined) {
            const message = `Public key is not saved on chain for user ${userId}. ` +
                `But env variables DEV_ADMIN_USER_ID and DEV_ADMIN_PUBLIC_KEY are set for the user. ` +
                `Thus, the public key from env will be used.`;
            ctx.logging.getLogger().warn(message);
            const pk = new api_1.PublicKey();
            pk.publicKey = process.env.DEV_ADMIN_PUBLIC_KEY;
            return pk;
        }
        return undefined;
    }
    /**
     * Verifies if the data is properly signed. Throws exception instead.
     */
    static async ensurePublicKeySignatureIsValid(ctx, userId, dto) {
        const pk = await PublicKeyService.getPublicKey(ctx, userId);
        if (pk === undefined) {
            throw new PublicKeyError_1.PkMissingError(userId);
        }
        const isSignatureValid = dto.isSignatureValid(pk.publicKey);
        if (!isSignatureValid) {
            throw new PublicKeyError_1.PkInvalidSignatureError(userId);
        }
        return pk;
    }
}
exports.PublicKeyService = PublicKeyService;
PublicKeyService.PK_INDEX_KEY = api_1.PK_INDEX_KEY;
PublicKeyService.UP_INDEX_KEY = api_1.UP_INDEX_KEY;
PublicKeyService.normalizePublicKey = api_1.normalizePublicKey;
