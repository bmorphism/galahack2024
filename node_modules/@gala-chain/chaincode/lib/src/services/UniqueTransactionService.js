"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniqueTransactionService = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const state_1 = require("../utils/state");
const UniqueTransaction_1 = require("./UniqueTransaction");
const UniqueTransactionError_1 = require("./UniqueTransactionError");
class UniqueTransactionService {
    static getUniqueTransactionKey(ctx, uniqueKey) {
        return ctx.stub.createCompositeKey(UniqueTransactionService.UT_INDEX_KEY, [uniqueKey]);
    }
    static async putUniqueTransaction(ctx, uniqueKey) {
        const dto = new UniqueTransaction_1.UniqueTransaction();
        dto.uniqueKey = uniqueKey;
        dto.created = ctx.txUnixTime;
        dto.transactionId = ctx.stub.getTxID();
        await (0, state_1.putChainObject)(ctx, dto);
    }
    static async ensureUniqueKey(ctx, uniqueKey) {
        const key = UniqueTransactionService.getUniqueTransactionKey(ctx, uniqueKey);
        await (0, state_1.getObjectByKey)(ctx, UniqueTransaction_1.UniqueTransaction, key)
            .then((ut) => {
            throw new UniqueTransactionError_1.UniqueTransactionConflictError(uniqueKey, ut.transactionId);
        })
            .catch((e) => {
            if (api_1.ChainError.matches(e, api_1.ErrorCode.NOT_FOUND)) {
                return;
            }
            else {
                throw e;
            }
        });
    }
    static async ensureUniqueTransaction(ctx, uniqueKey) {
        await UniqueTransactionService.ensureUniqueKey(ctx, uniqueKey);
        await UniqueTransactionService.putUniqueTransaction(ctx, uniqueKey);
    }
}
exports.UniqueTransactionService = UniqueTransactionService;
UniqueTransactionService.UT_INDEX_KEY = UniqueTransaction_1.UniqueTransaction.INDEX_KEY;
