"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PkInvalidSignatureError = exports.PkMissingError = exports.PkNotFoundError = exports.PkMismatchError = exports.ProfileNotFoundError = exports.ProfileExistsError = exports.PkExistsError = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
class PkExistsError extends api_1.ConflictError {
    constructor(user) {
        super(`Public key is already saved for user ${user}`, { user });
    }
}
exports.PkExistsError = PkExistsError;
class ProfileExistsError extends api_1.ConflictError {
    constructor(address, userAlias) {
        const msg = `User Profile is already saved for ethereum address ${address}, user ${userAlias}`;
        super(msg, { address, userAlias });
    }
}
exports.ProfileExistsError = ProfileExistsError;
class ProfileNotFoundError extends api_1.NotFoundError {
    constructor(address) {
        super(`UserProfile is not saved for ethereum address ${address}`, { address });
    }
}
exports.ProfileNotFoundError = ProfileNotFoundError;
class PkMismatchError extends api_1.ConflictError {
    constructor(user) {
        super(`Public key does not match existing publicKey on chain for user ${user}`, { user });
    }
}
exports.PkMismatchError = PkMismatchError;
class PkNotFoundError extends api_1.NotFoundError {
    constructor(user) {
        super(`Public key is not saved for user ${user}`, { user });
    }
}
exports.PkNotFoundError = PkNotFoundError;
class PkMissingError extends api_1.UnauthorizedError {
    constructor(user) {
        super(`Missing public key for user ${user}`, { user });
    }
}
exports.PkMissingError = PkMissingError;
class PkInvalidSignatureError extends api_1.UnauthorizedError {
    constructor(user) {
        const message = `Signature is invalid. DTO should be signed by ${user} private key with secp256k1 algorithm`;
        super(message, { user });
    }
}
exports.PkInvalidSignatureError = PkInvalidSignatureError;
