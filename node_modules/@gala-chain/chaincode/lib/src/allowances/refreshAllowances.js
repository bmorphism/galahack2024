"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.refreshAllowances = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const utils_1 = require("../utils");
const AllowanceError_1 = require("./AllowanceError");
async function refreshAllowanceProperties(ctx, allowanceKey, uses, expires) {
    const allowanceKeys = [
        allowanceKey.grantedTo,
        allowanceKey.collection,
        allowanceKey.category,
        allowanceKey.type,
        allowanceKey.additionalKey,
        allowanceKey.instance.toFixed(),
        allowanceKey.allowanceType.toString(),
        allowanceKey.grantedBy,
        allowanceKey.created.toString()
    ];
    const allowance = await (0, utils_1.getObjectByKey)(ctx, api_1.TokenAllowance, api_1.ChainObject.getCompositeKeyFromParts(api_1.TokenAllowance.INDEX_KEY, allowanceKeys));
    // This method supports update of uses or expiration date,
    // but not quantity, which would require more complex checks of
    // user TokenBalance for Lock/Use etc., and Token supply/capacity etc. for Mints.
    allowance.uses = uses;
    allowance.expires = expires;
    await (0, utils_1.putChainObject)(ctx, allowance);
    return allowance;
}
async function refreshAllowances(ctx, allowances) {
    const results = [];
    for (const allowance of allowances) {
        if (allowance.allowanceKey.grantedBy !== ctx.callingUser) {
            throw new AllowanceError_1.UnauthorizedAllowanceRefreshError(ctx.callingUser, allowance.allowanceKey.grantedBy);
        }
        const update = await refreshAllowanceProperties(ctx, allowance.allowanceKey, allowance.uses, allowance.expires);
        results.push(update);
    }
    return results;
}
exports.refreshAllowances = refreshAllowances;
