"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fullAllowanceCheck = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const api_2 = require("@gala-chain/api");
const utils_1 = require("../utils");
async function fullAllowanceCheck(ctx, data) {
    // PartialCompositeKey params in order for TokenBalance
    const queryParams = (0, utils_1.takeUntilUndefined)(data.owner, data.collection, data.category, data.type, data.additionalKey);
    const balances = await (0, utils_1.getObjectsByPartialCompositeKey)(ctx, api_2.TokenBalance.INDEX_KEY, queryParams, api_2.TokenBalance);
    // For each relevant balance, fetch relevant allowance(s)
    const missing = [];
    for (const balance of balances) {
        for (const instanceId of balance.getNftInstanceIds()) {
            const allowanceParams = [
                data.grantedTo,
                balance.collection,
                balance.category,
                balance.type,
                balance.additionalKey,
                instanceId.toFixed(),
                data.allowanceType.toString(),
                data.owner
            ];
            const allowanceResults = await (0, utils_1.getObjectsByPartialCompositeKey)(ctx, api_1.TokenAllowance.INDEX_KEY, allowanceParams, api_1.TokenAllowance);
            const expiredAllowances = allowanceResults.filter((allowance) => {
                return (allowance.usesSpent.isGreaterThanOrEqualTo(allowance.uses) ||
                    allowance.quantitySpent.isGreaterThanOrEqualTo(allowance.quantity) ||
                    (allowance.expires !== 0 && allowance.expires && allowance.expires <= ctx.txUnixTime));
            });
            if (expiredAllowances.length === allowanceResults.length) {
                // i.e. no active, useable allowances. Record TokenInstanceKey.
                const tokenMissingAllowance = new api_1.TokenInstanceKey();
                tokenMissingAllowance.collection = balance.collection;
                tokenMissingAllowance.category = balance.category;
                tokenMissingAllowance.type = balance.type;
                tokenMissingAllowance.additionalKey = balance.additionalKey;
                tokenMissingAllowance.instance = instanceId;
                missing.push(tokenMissingAllowance);
            }
        }
    }
    const result = new api_1.FullAllowanceCheckResDto();
    if (missing.length > 0) {
        result.all = false;
        result.missing = missing;
    }
    else {
        result.all = true;
    }
    return result;
}
exports.fullAllowanceCheck = fullAllowanceCheck;
