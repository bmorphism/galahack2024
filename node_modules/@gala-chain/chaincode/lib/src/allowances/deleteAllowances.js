"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteOneAllowance = exports.deleteAllowances = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const api_2 = require("@gala-chain/api");
const api_3 = require("@gala-chain/api");
const utils_1 = require("../utils");
const fetchAllowances_1 = require("./fetchAllowances");
class InvalidAllowanceUsersError extends api_3.ForbiddenError {
    constructor(grantedBy, grantedTo) {
        super("Only the user who granted the allowance or the user who is granted the allowance can delete it", {
            grantedBy,
            grantedTo
        });
    }
}
async function deleteAllowances(ctx, params) {
    if (params.grantedBy !== ctx.callingUser && params.grantedTo !== ctx.callingUser) {
        throw new InvalidAllowanceUsersError(params.grantedBy, params.grantedTo);
    }
    const allowances = await (0, fetchAllowances_1.fetchAllowances)(ctx, params);
    await Promise.all(allowances.map((allowance) => (0, utils_1.deleteChainObject)(ctx, allowance)));
    return allowances.length;
}
exports.deleteAllowances = deleteAllowances;
async function deleteOneAllowance(ctx, params, authorizedOnBehalf) {
    if (params.grantedBy !== authorizedOnBehalf && params.grantedTo !== authorizedOnBehalf) {
        throw new InvalidAllowanceUsersError(params.grantedBy, params.grantedTo);
    }
    const allowance = await (0, utils_1.getObjectByKey)(ctx, api_1.TokenAllowance, api_2.ChainObject.getCompositeKeyFromParts(api_1.TokenAllowance.INDEX_KEY, [
        params.grantedTo,
        params.collection,
        params.category,
        params.type,
        params.additionalKey,
        params.instance,
        params.allowanceType.toString(),
        params.grantedBy,
        params.created.toString()
    ]));
    await (0, utils_1.deleteChainObject)(ctx, allowance);
}
exports.deleteOneAllowance = deleteOneAllowance;
