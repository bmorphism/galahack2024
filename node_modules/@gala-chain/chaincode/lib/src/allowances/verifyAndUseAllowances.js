"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyAndUseAllowances = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const utils_1 = require("../utils");
const AllowanceError_1 = require("./AllowanceError");
const checkAllowances_1 = require("./checkAllowances");
const fetchAllowances_1 = require("./fetchAllowances");
const useAllowances_1 = require("./useAllowances");
async function verifyAndUseAllowances(ctx, grantedBy, tokenInstanceKey, quantity, tokenInstance, authorizedOnBehalf, actionType, useAllowancesArr) {
    let applicableAllowances;
    if (useAllowancesArr.length) {
        const fetchedAllowances = await (0, utils_1.getObjectsByKeys)(ctx, api_1.TokenAllowance, useAllowancesArr);
        applicableAllowances = fetchedAllowances.filter((a) => a.allowanceType === actionType &&
            a.collection === tokenInstance.collection &&
            a.category === tokenInstance.category &&
            a.type === tokenInstance.type &&
            a.additionalKey === tokenInstance.additionalKey);
        // Verify grantedBy and grantedTo
        applicableAllowances.forEach((allowance) => {
            if (allowance.grantedBy !== grantedBy) {
                throw new AllowanceError_1.AllowanceUsersMismatchError(allowance, grantedBy, authorizedOnBehalf);
            }
            else if (allowance.grantedTo !== authorizedOnBehalf) {
                throw new AllowanceError_1.AllowanceUsersMismatchError(allowance, grantedBy, authorizedOnBehalf);
            }
        });
    }
    else {
        const applicableAllowanceResponse = await (0, fetchAllowances_1.fetchAllowances)(ctx, {
            grantedBy: grantedBy,
            grantedTo: authorizedOnBehalf,
            collection: tokenInstance.collection,
            category: tokenInstance.category,
            type: tokenInstance.type,
            additionalKey: tokenInstance.additionalKey,
            instance: tokenInstance.instance.toFixed(),
            allowanceType: actionType
        });
        applicableAllowances = applicableAllowanceResponse !== null && applicableAllowanceResponse !== void 0 ? applicableAllowanceResponse : [];
    }
    // verify allowance quantity
    const allowedQuantity = await (0, checkAllowances_1.checkAllowances)(ctx, applicableAllowances, tokenInstanceKey, actionType, authorizedOnBehalf);
    if (quantity.isGreaterThan(allowedQuantity)) {
        throw new AllowanceError_1.InsufficientAllowanceError(authorizedOnBehalf, allowedQuantity, actionType, quantity, tokenInstanceKey, grantedBy);
    }
    // Use allowances (which also creates claims)
    const useResult = await (0, useAllowances_1.useAllowances)(ctx, quantity, applicableAllowances);
    return useResult;
}
exports.verifyAndUseAllowances = verifyAndUseAllowances;
