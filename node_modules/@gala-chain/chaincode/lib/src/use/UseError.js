"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReleaseForbiddenUserError = exports.NftInvalidQuantityUseError = exports.LockNotFoundError = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
class LockNotFoundError extends api_1.NotFoundError {
    constructor(tokenInstance) {
        super(`No lock found for instance ${tokenInstance}`, { tokenInstance });
    }
}
exports.LockNotFoundError = LockNotFoundError;
class NftInvalidQuantityUseError extends api_1.ValidationFailedError {
    constructor(quantity, tokenInstanceKey) {
        super(`Provided non-1 quantity (${quantity.toFixed()}) for use for NFT token ${tokenInstanceKey}`, {
            quantity,
            tokenInstanceKey
        });
    }
}
exports.NftInvalidQuantityUseError = NftInvalidQuantityUseError;
class ReleaseForbiddenUserError extends api_1.ForbiddenError {
    constructor(user, tokenInstanceKey) {
        super(`${user} lacks authority to release token ${tokenInstanceKey}`, {
            user,
            tokenInstanceKey
        });
    }
}
exports.ReleaseForbiddenUserError = ReleaseForbiddenUserError;
