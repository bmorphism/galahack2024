/**
 * Represents a user configuration object, containing all the information
 * needed to authenticate and sign transactions.
 *
 * @class ChainUser
 */
export declare class ChainUser {
    readonly prefix: string;
    readonly name: string;
    readonly identityKey: string;
    readonly ethAddress: string;
    readonly privateKey: string;
    readonly publicKey: string;
    /**
     * @param {Object} config - Configuration object for the constructor.
     *
     * @param {string} [config.name] - If provided, the resulting prefix will be
     * `client` and identityKey will be `client|${name}`. Otherwise, the prefix
     * will be `eth` and identityKey will be `eth|${ethAddress}`.
     *
     * @param {string} config.privateKey - A secp256k1 private key to be used for
     * cryptographic operations. It will be used to calculate the public key and
     * the ethAddress, and will be used to sign transactions.
     */
    constructor(config: {
        name?: string;
        privateKey: string;
    });
    /**
     * Generates a new ChainUser object with random keys.
     *
     * @param {string} [name] - The name to be used for the ChainUser.
     * If provided, the resulting identityKey will be `client|${name}`.
     * Otherwise, the identityKey will be `eth|${ethAddress}`.
     *
     * @return {ChainUser} - A new ChainUser object with the generated
     * random keys and the provided or default name.
     */
    static withRandomKeys(name?: string): ChainUser;
}
