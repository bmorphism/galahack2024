import { ChainCallDTO, GalaChainResponse, Inferred } from "@gala-chain/api";
import { ChainClientBuilder } from "./ChainClientBuilder";
import { ContractConfig } from "./ContractConfig";
export type ClassType<T> = {
    new (...args: unknown[]): T;
};
export declare const isClassType: (obj: unknown) => obj is ClassType<unknown>;
export declare abstract class ChainClient {
    readonly builder: Promise<ChainClientBuilder>;
    readonly userId: string;
    readonly contractConfig: ContractConfig;
    readonly orgMsp: string;
    protected constructor(builder: Promise<ChainClientBuilder>, userId: string, contractConfig: ContractConfig, orgMsp: string);
    abstract submitTransaction(method: string): Promise<GalaChainResponse<unknown>>;
    abstract submitTransaction(method: string, dto: ChainCallDTO): Promise<GalaChainResponse<unknown>>;
    abstract submitTransaction<T>(method: string, resp: ClassType<Inferred<T>>): Promise<GalaChainResponse<T>>;
    abstract submitTransaction<T>(method: string, dto: ChainCallDTO, resp: ClassType<Inferred<T>>): Promise<GalaChainResponse<T>>;
    abstract evaluateTransaction(method: string): Promise<GalaChainResponse<unknown>>;
    abstract evaluateTransaction(method: string, dto: ChainCallDTO): Promise<GalaChainResponse<unknown>>;
    abstract evaluateTransaction<T>(method: string, resp: ClassType<Inferred<T>>): Promise<GalaChainResponse<T>>;
    abstract evaluateTransaction<T>(method: string, dto: ChainCallDTO, resp: ClassType<Inferred<T>>): Promise<GalaChainResponse<T>>;
    abstract disconnect(): Promise<void>;
    abstract forUser(userId: string, secret?: string): ChainClient;
    extendAPI<T extends object>(apiHandlerFn: (_: ChainClient) => T): this & T;
}
