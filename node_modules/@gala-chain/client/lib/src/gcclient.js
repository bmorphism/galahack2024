"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gcclient = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const process_1 = tslib_1.__importDefault(require("process"));
const generic_1 = require("./generic");
const hf_1 = require("./hf");
const rest_api_1 = require("./rest-api");
function forConnectionProfile(hf) {
    var _a, _b, _c, _d;
    const connectionProfile = (0, generic_1.loadJson)(hf.connectionProfilePath);
    if (!((_a = connectionProfile.organizations) === null || _a === void 0 ? void 0 : _a[hf.orgMsp])) {
        const allowedOrgs = typeof connectionProfile.organizations === "object"
            ? Object.keys((_b = connectionProfile.organizations) !== null && _b !== void 0 ? _b : {})
            : [];
        throw new Error(`Organization ${hf.orgMsp} not found in connection profile. Allowed orgs: ${allowedOrgs.join(", ")}`);
    }
    const userId = (_c = hf.userId) !== null && _c !== void 0 ? _c : process_1.default.env.GC_USER_ID;
    if (!userId) {
        throw new Error("Missing user id. Please provide it manually or in GC_USER_ID environment variable.");
    }
    const adminPass = (_d = hf.userSecret) !== null && _d !== void 0 ? _d : process_1.default.env.GC_USER_PASS;
    if (!adminPass) {
        throw new Error("Missing user pass. Please provide it manually or in GC_USER_PASS environment variable.");
    }
    return new hf_1.HFClientBuilder(hf.orgMsp, userId, adminPass, connectionProfile);
}
function forApiConfig(api) {
    var _a, _b;
    const config = (0, rest_api_1.loadRestApiConfig)(api.configPath);
    const adminKey = (_a = api.userId) !== null && _a !== void 0 ? _a : process_1.default.env.GC_API_KEY;
    if (!adminKey) {
        throw new Error("Missing admin key. Please provide it manually or GC_API_KEY environment variable.");
    }
    const adminSecret = (_b = api.userSecret) !== null && _b !== void 0 ? _b : process_1.default.env.GC_API_SECRET;
    if (!adminSecret) {
        throw new Error("Missing admin secret. Please provide it manually or GC_API_SECRET environment variable.");
    }
    return new rest_api_1.RestApiClientBuilder(api.apiUrl, api.orgMsp, { adminKey, adminSecret }, config);
}
exports.gcclient = {
    forConnectionProfile,
    forApiConfig
};
