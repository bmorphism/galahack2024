import { ChainCallDTO, GalaChainResponse, Inferred } from "@gala-chain/api";
import { Contract, Gateway, Network } from "fabric-network";
import { ChainClient, ClassType, ContractConfig } from "../generic";
import { HFClientBuilder } from "./HFClientBuilder";
export declare class HFClient extends ChainClient {
    private resolvedBuilder;
    private readonly createContractPromise;
    private contractPromise;
    constructor(resolvedBuilder: HFClientBuilder, userId: string, contractConfig: ContractConfig, createContractPromise: (userId: string) => Promise<{
        contract: Contract;
        gateway: Gateway;
        network: Network;
    }>);
    forUser(userId: string): ChainClient;
    get contract(): Promise<Contract>;
    disconnect(): Promise<void>;
    submitTransaction<T>(method: string, dtoOrResp?: ChainCallDTO | ClassType<Inferred<T>>, resp?: ClassType<Inferred<T>>): Promise<GalaChainResponse<T>>;
    evaluateTransaction<T>(method: string, dtoOrResp?: ChainCallDTO | ClassType<Inferred<T>>, resp?: ClassType<Inferred<T>>): Promise<GalaChainResponse<T>>;
}
