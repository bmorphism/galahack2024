"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HFClient = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const generic_1 = require("../generic");
class HFClient extends generic_1.ChainClient {
    constructor(resolvedBuilder, userId, contractConfig, createContractPromise) {
        super(Promise.resolve(resolvedBuilder), userId, contractConfig, resolvedBuilder.orgMsp);
        this.resolvedBuilder = resolvedBuilder;
        this.createContractPromise = createContractPromise;
    }
    forUser(userId) {
        return new HFClient(this.resolvedBuilder, userId, this.contractConfig, this.createContractPromise);
    }
    get contract() {
        if (this.contractPromise === undefined) {
            this.contractPromise = this.createContractPromise(this.userId);
        }
        return this.contractPromise.then((c) => c.contract);
    }
    async disconnect() {
        if (this.contractPromise === undefined) {
            return;
        }
        const { gateway } = await this.contractPromise;
        gateway.disconnect();
        this.contractPromise = undefined;
    }
    async submitTransaction(method, dtoOrResp, resp) {
        const [dto, responseType] = (0, generic_1.isClassType)(dtoOrResp) ? [undefined, dtoOrResp] : [dtoOrResp, resp];
        const serialized = dto === null || dto === void 0 ? void 0 : dto.serialize();
        const contract = await this.contract;
        const transaction = contract.createTransaction(method);
        const responseBuffer = serialized === undefined ? await transaction.submit() : await transaction.submit(serialized);
        const responseString = responseBuffer.toString();
        return api_1.GalaChainResponse.deserialize(responseType, responseString);
    }
    async evaluateTransaction(method, dtoOrResp, resp) {
        const [dto, responseType] = (0, generic_1.isClassType)(dtoOrResp) ? [undefined, dtoOrResp] : [dtoOrResp, resp];
        const serialized = dto === null || dto === void 0 ? void 0 : dto.serialize();
        const contract = await this.contract;
        const transaction = contract.createTransaction(method);
        const responseBuffer = serialized === undefined ? await transaction.evaluate() : await transaction.evaluate(serialized);
        const responseString = responseBuffer.toString();
        return api_1.GalaChainResponse.deserialize(responseType, responseString);
    }
}
exports.HFClient = HFClient;
