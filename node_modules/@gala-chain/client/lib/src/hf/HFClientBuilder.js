"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HFClientBuilder = void 0;
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const generic_1 = require("../generic");
const CAClient_1 = require("./CAClient");
const HFClient_1 = require("./HFClient");
class HFClientBuilder extends generic_1.ChainClientBuilder {
    constructor(orgMsp, adminId, adminSecret, connectionProfile) {
        var _a;
        super();
        this.orgMsp = orgMsp;
        this.connectionProfile = connectionProfile;
        this.caClient = new CAClient_1.CAClient(orgMsp, adminId, adminSecret, connectionProfile);
        // if there are both orderers and channels in the connection profile, then we don't need to use service discovery
        this.useServiceDiscovery = !(isNonEmptyObject(connectionProfile.orderers) && isNonEmptyObject(connectionProfile.channels));
        if (!isNonEmptyObject(connectionProfile.peers)) {
            throw new Error("No peers found in connection profile");
        }
        // if peer urls contain localhost, then asLocalhost = true
        const peerUrls = Object.values((_a = connectionProfile.peers) !== null && _a !== void 0 ? _a : {}).map((peer) => peer === null || peer === void 0 ? void 0 : peer.url);
        const localhostUrls = peerUrls.filter((url) => url.includes("//localhost:"));
        if (localhostUrls.length > 0 && localhostUrls.length !== peerUrls.length) {
            throw new Error("Cannot mix localhost and non-localhost peer urls");
        }
        this.asLocalhost = localhostUrls.length > 0;
    }
    forContract(cfg) {
        const createContractPromise = async (userId) => {
            const gateway = await this.buildConnectedGateway(userId);
            const network = await gateway.getNetwork(cfg.channelName);
            const contract = network.getContract(cfg.chaincodeName, cfg.contractName);
            return { contract: contract, gateway: gateway, network: network };
        };
        return new HFClient_1.HFClient(this, this.caClient.adminId, cfg, createContractPromise);
    }
    async buildConnectedGateway(userId) {
        const { Gateway } = await Promise.resolve().then(() => __importStar(require("fabric-network")));
        const gateway = new Gateway();
        const wallet = await this.caClient.wallet;
        const identity = await this.caClient.getIdentityOrRegisterUser(userId);
        const useServiceDiscovery = this.useServiceDiscovery;
        const asLocalhost = this.asLocalhost;
        const gatewayOpts = {
            wallet,
            identity,
            discovery: { enabled: useServiceDiscovery, asLocalhost: asLocalhost }
        };
        await gateway.connect(this.connectionProfile, gatewayOpts);
        return gateway;
    }
}
exports.HFClientBuilder = HFClientBuilder;
function isNonEmptyObject(obj) {
    return typeof obj === "object" && obj !== null && Object.keys(obj).length > 0;
}
