"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadRestApiConfig = exports.restApiJsonSchema = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const jsonschema_1 = require("jsonschema");
exports.restApiJsonSchema = {
    $schema: "http://json-schema.org/draft-07/schema#",
    definitions: {
        IChannelConfig: {
            properties: {
                channelName: {
                    type: "string"
                },
                contracts: {
                    items: {
                        $ref: "#/definitions/IContractConfig"
                    },
                    type: "array"
                },
                pathFragment: {
                    type: "string"
                }
            },
            required: ["channelName", "contracts", "pathFragment"],
            type: "object"
        },
        IContractConfig: {
            properties: {
                chaincodeName: {
                    type: "string"
                },
                contractName: {
                    type: "string"
                },
                pathFragment: {
                    type: "string"
                }
            },
            required: ["chaincodeName", "contractName", "pathFragment"],
            type: "object"
        }
    },
    properties: {
        channels: {
            items: {
                $ref: "#/definitions/IChannelConfig"
            },
            type: "array"
        }
    },
    required: ["channels"],
    type: "object"
};
function loadJson(path) {
    const content = fs_1.default.readFileSync(path).toString();
    try {
        return JSON.parse(content);
    }
    catch (e) {
        throw new Error(`Failed to parse JSON at ${path}: ${e}`);
    }
}
function loadRestApiConfig(configPath) {
    const json = loadJson(configPath);
    const validator = new jsonschema_1.Validator();
    const validation = validator.validate(json, exports.restApiJsonSchema);
    if (validation.valid) {
        return json;
    }
    else {
        throw new Error(getValidationErrorMessage(validation.errors));
    }
}
exports.loadRestApiConfig = loadRestApiConfig;
function getValidationErrorMessage(validationErrors) {
    return validationErrors
        .map((e) => {
        var _a, _b, _c;
        const targetInfo = typeof e.target === "object" ? ` of ${(_b = (_a = e.target.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : e.target}` : "";
        const intro = `Property '${e.property}'${targetInfo} has failed the following constraints:`;
        const constraints = (_c = e.constraints) !== null && _c !== void 0 ? _c : {};
        const details = Object.keys(constraints)
            .sort()
            .map((k) => `${k} (${constraints[k]})`);
        return `${intro} ${details.join(", ")}`;
    })
        .join(". ");
}
