"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalRestApiConfig = exports.GlobalRestApiConfig = void 0;
class GlobalRestApiConfig {
    constructor() {
        this.isRestApiInitializedAndHealthy = {};
        this.contractApis = {};
        this.authorizedFabloRest = {};
    }
    isHealthy(apiUrl) {
        const result = this.isRestApiInitializedAndHealthy[apiUrl];
        if (result === true) {
            return true;
        }
        if (result === undefined) {
            return false;
        }
        throw new Error(`Failed to initialize Rest API at ${apiUrl} failed to initialize: ${result === null || result === void 0 ? void 0 : result.message}`);
    }
    markHealthy(apiUrl) {
        this.isRestApiInitializedAndHealthy[apiUrl] = true;
    }
    markUnhealthy(apiUrl, error) {
        this.isRestApiInitializedAndHealthy[apiUrl] = error;
    }
    setContractApi(params) {
        const key = `${params.channelName}|${params.chaincodeName}|${params.contractName}`;
        this.contractApis[key] = { contractPath: params.contractPath, api: params.api };
    }
    getContractApi(params) {
        var _a;
        const key = `${params.channelName}|${params.chaincodeName}|${params.contractName}`;
        return ((_a = this.contractApis[key]) !== null && _a !== void 0 ? _a : (() => {
            throw new Error(`Cannot find contract API for key ${key}`);
        }));
    }
    setAuthorizedFabloRest(apiUrl, token) {
        this.authorizedFabloRest[apiUrl] = token;
    }
    getAuthorizedFabloRest(apiUrl) {
        return this.authorizedFabloRest[apiUrl];
    }
}
exports.GlobalRestApiConfig = GlobalRestApiConfig;
exports.globalRestApiConfig = new GlobalRestApiConfig();
