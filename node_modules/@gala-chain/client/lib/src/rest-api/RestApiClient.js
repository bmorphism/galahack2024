"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestApiClient = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@gala-chain/api");
const axios_1 = tslib_1.__importDefault(require("axios"));
const generic_1 = require("../generic");
const GlobalRestApiConfig_1 = require("./GlobalRestApiConfig");
async function getPath(restApiUrl, cfg, method, isWrite) {
    var _a;
    const { api, contractPath } = GlobalRestApiConfig_1.globalRestApiConfig.getContractApi(cfg);
    const methodApi = api.methods.find((m) => m.methodName === method);
    if (!methodApi) {
        throw new Error(`Cannot find method API for method ${method} and contract ${contractPath}`);
    }
    if (isWrite && !methodApi.isWrite) {
        throw new Error(`Method ${method} from contract ${contractPath} is read-only`);
    }
    if (!isWrite && methodApi.isWrite) {
        throw new Error(`Method ${method} from contract ${contractPath} is not read-only`);
    }
    return `${restApiUrl}/${contractPath}/${(_a = methodApi.apiMethodName) !== null && _a !== void 0 ? _a : methodApi.methodName}`;
}
function catchAxiosError(e) {
    var _a, _b, _c, _d, _e, _f;
    // if data object contains { error: { Status: 0 } }, it means this is GalaChainResponse
    if (((_c = (_b = (_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.Status) === 0) {
        return { data: (_e = (_d = e === null || e === void 0 ? void 0 : e.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error };
    }
    else {
        const data = { axiosError: { message: e === null || e === void 0 ? void 0 : e.message, data: (_f = e === null || e === void 0 ? void 0 : e.response) === null || _f === void 0 ? void 0 : _f.data } };
        console.warn(`Axios error:`, JSON.stringify(data));
        return { data: data };
    }
}
class RestApiClient extends generic_1.ChainClient {
    constructor(builder, restApiUrl, contractConfig, credentials, orgMsp) {
        super(builder, credentials.adminKey, contractConfig, orgMsp);
        this.credentials = credentials;
        this.restApiUrl = builder.then(() => restApiUrl);
    }
    async isReady() {
        await this.builder;
        return true;
    }
    async disconnect() {
        // ensure all promises end, then do nothing
        await this.isReady();
    }
    async submitTransaction(method, dtoOrResp, resp) {
        const path = await getPath(await this.restApiUrl, this.contractConfig, method, true);
        return this.post(path, dtoOrResp, resp);
    }
    async evaluateTransaction(method, dtoOrResp, resp) {
        const path = await getPath(await this.restApiUrl, this.contractConfig, method, false);
        return this.post(path, dtoOrResp, resp);
    }
    async post(path, dtoOrResp, resp) {
        var _a, _b;
        const { adminKey, adminSecret } = this.credentials;
        const [dto, responseType] = (0, generic_1.isClassType)(dtoOrResp) ? [undefined, dtoOrResp] : [dtoOrResp, resp];
        const serialized = JSON.parse((_a = dto === null || dto === void 0 ? void 0 : dto.serialize()) !== null && _a !== void 0 ? _a : "{}");
        console.log(adminKey, "POST:", path, serialized);
        const headers = {
            "x-identity-lookup-key": adminKey,
            "x-user-encryption-key": adminSecret
        };
        const response = await axios_1.default
            .post(path, serialized, { headers: headers })
            .catch((e) => catchAxiosError(e));
        console.log("Response: ", response.data);
        return api_1.GalaChainResponse.deserialize(responseType, (_b = response.data) !== null && _b !== void 0 ? _b : {});
    }
    forUser(userId) {
        console.warn(`Ignoring forUser(${userId}) for RestApiClient`);
        return this;
    }
    static async getContractApis(credentials, restApiUrl, restApiConfig) {
        const headers = {
            "x-identity-lookup-key": credentials.adminKey,
            "x-user-encryption-key": credentials.adminSecret
        };
        // ensure admin account is created
        await axios_1.default.post(`${restApiUrl}/identity/ensure-admin`, undefined, { headers });
        // refresh api (may fail silently)
        await axios_1.default.post(`${restApiUrl}/refresh-api`, undefined, { headers });
        const contractApis = [];
        for (const channel of restApiConfig.channels) {
            for (const contract of channel.contracts) {
                const contractPath = `${channel.pathFragment}/${contract.pathFragment}`;
                const getApiPath = `${restApiUrl}/${contractPath}/GetContractAPI`;
                console.log("Loading ContractAPI:", getApiPath);
                const apiResponse = await axios_1.default.post(getApiPath, undefined, { headers });
                if (!api_1.GalaChainResponse.isSuccess(apiResponse.data)) {
                    throw new Error(`Failed to load ContractAPI for ${contractPath}: ${JSON.stringify(apiResponse.data)}`);
                }
                console.log("API:", getApiPath, apiResponse.data);
                contractApis.push({
                    channelName: channel.channelName,
                    chaincodeName: contract.chaincodeName,
                    contractName: contract.contractName,
                    contractPath: contractPath,
                    api: apiResponse.data.Data
                });
            }
        }
        return contractApis;
    }
}
exports.RestApiClient = RestApiClient;
